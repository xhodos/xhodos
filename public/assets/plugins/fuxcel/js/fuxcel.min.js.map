{
  "version": 3,
  "sources": ["../../src/ts/fuxcel.ts"],
  "sourcesContent": ["declare type IterableElement = HTMLCollection | HTMLElement[] | HTMLScriptElement[] | HTMLFormElement[] | HTMLInputElement[] | HTMLSelectElement[] | HTMLTextAreaElement[] | Document[] | []\r\ndeclare type SingleElement = HTMLElement | HTMLFormElement | HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | Document;\r\ndeclare type Direction = 'horizontal' | 'vertical';\r\ndeclare type Position = 'affix' | 'prefix' | 'postfix' | 'suffix';\r\n\r\ndeclare type FieldAttributes = { id: string | any, type: StringOrNull | undefined, fxId: StringOrNull | undefined, fxRole: StringOrNull | undefined, formId: StringOrNull };\r\n\r\ndeclare type FuxcelOrString<T extends string | object, U extends boolean | string | null = null> = T extends object ? Fuxcel : (T extends string ? (U extends string ? Fuxcel : (U extends boolean ? Fuxcel : string)) : string);\r\n\r\ndeclare type AnimationComplete = <T extends string, U extends number | null = 300, V extends number | null = 1>(display: T, timeout: U, iterations: V) => Promise<Fuxcel>;\r\ndeclare type AnimationPartial = <T extends number | null = 300, U extends number | null = 1>(display: string, timeout: T, iterations: U) => Promise<Fuxcel>;\r\ndeclare type FuxcelAnimation = AnimationPartial | AnimationComplete;\r\n\r\ndeclare type HTMLListenerArray = Array<{\r\n\telement: HTMLElement;\r\n\tlistener: EventListenerOrEventListenerObject | boolean | undefined;\r\n\tevent: keyof HTMLElementEventMap | string;\r\n\toption: boolean;\r\n}>;\r\n\r\ndeclare type ModalInit = {\r\n\ttitle: StringOrNull,\r\n\thtml: boolean,\r\n\tcontent: string,\r\n\tid: string,\r\n\thasFooter: boolean\r\n};\r\n\r\ndeclare type FXAnimationOptions = {\r\n\tname: string;\r\n\tonBegin: object;\r\n\tonFinished: object;\r\n\toptions: {\r\n\t\tkeyFrames: Keyframe[] | PropertyIndexedKeyframes | null;\r\n\t\ttiming: {\r\n\t\t\tduration: string | number,\r\n\t\t\titerations: number\r\n\t\t};\r\n\t};\r\n}\r\n\r\ndeclare type FXAnimationType = {\r\n\ttimeout?: number | string;\r\n\titerations?: number;\r\n\tdisplay?: string;\r\n}\r\n\r\ndeclare type FXAnimationReturn = {\r\n\tblink: FXAnimationOptions,\r\n\tfadeIn: FXAnimationOptions,\r\n\tfadeOut: FXAnimationOptions,\r\n\tslideInDown: FXAnimationOptions,\r\n\tslideOutDown: FXAnimationOptions,\r\n\tslideOutUp: FXAnimationOptions,\r\n\tslideInLeft: FXAnimationOptions,\r\n\tslideInRight: FXAnimationOptions,\r\n\tslideOutLeft: FXAnimationOptions,\r\n\tslideOutRight: FXAnimationOptions,\r\n\tspaceLettersBig: FXAnimationOptions,\r\n\tspaceLettersSmall: FXAnimationOptions,\r\n\tunspaceLetters: FXAnimationOptions,\r\n\tzoomIn: FXAnimationOptions,\r\n}\r\n\r\ndeclare type FXAnimation = (args: FXAnimationType) => FXAnimationReturn;\r\n\r\ndeclare type FXModalType = {\r\n\t/*** _Modal Title._ ***/ title?: StringOrNull,\r\n\t/*** _Modal type._ ***/ type?: ('success' | 'warning' | 'error'),\r\n\t/*** _Body Content of Modal._ ***/ content?: StringOrNull,\r\n\t/*** _Text for Confirm Button._ ***/ confirmButtonText?: StringOrNull,\r\n\t/*** _Text for Cancel Button._ ***/ cancelButtonText?: StringOrNull,\r\n\t/*** _Use HTML content? else use Text content._ ***/ html?: boolean,\r\n\t/*** _Callback on confirm button click._ ***/ onConfirm?: ((e: CustomEvent, modal: FuxcelModal) => void) | null,\r\n\t/*** _Callback on cancel button click._ ***/ onCancel?: ((e: CustomEvent, modal: FuxcelModal) => void) | null,\r\n\t/*** _Callback on Escape key used. Only works when cancel button is not available. [i.e. cancelButtonText is null]._ ***/ onEsc?: ((e: CustomEvent, modal: FuxcelModal) => void) | null,\r\n};\r\n\r\ndeclare type FXRequestType = {\r\n\t/*** _Request URL._ ***/ uri?: string,\r\n\t/*** _Request method._ ***/ method?: ('get' | 'post' | 'put' | 'patch' | 'delete'),\r\n\t/*** _Additional request data._ ***/ data?: BodyInit | object | null,\r\n\t/*** _Expected return data type._ ***/ dataType?: ('html' | 'json' | 'jsonp' | 'script' | 'text' | 'xml'),\r\n\t/*** _Additional Headers to be sent along the request._ ***/ headers?: Object | Headers | null,\r\n\t/*** _Before request is sent._ ***/ beforeSend?: Function | null,\r\n\t/*** _Request Timeout._ ***/ timeout?: number,\r\n\t/*** _Once request is completed._ ***/ onComplete?: ((response: ResponseData, status: number, statusText: string) => void) | null,\r\n\t/*** _If request has errors._ ***/ onError?: ((error: any, status: number, statusText: string) => void) | null,\r\n\t/*** _If request is successful._ ***/ onSuccess?: ((response: ResponseData, status: number, statusText: string) => void) | null,\r\n};\r\n\r\ndeclare type FXFormSubmitType = {\r\n\t/*** _Submission URL._ ***/ uri?: StringOrNull,\r\n\t/*** _Submission method._ ***/ method?: ('get' | 'post' | 'put' | 'patch' | 'delete'),\r\n\t/*** _Additional submission data._ ***/ data?: object | null,\r\n\t/*** _Expected return data type_ ***/ dataType?: ('html' | 'json' | 'jsonp' | 'script' | 'text' | 'xml'),\r\n\t/*** _Additional Headers to be sent along the request._ ***/ headers?: Object | Headers | null,\r\n\t/*** _Before request is sent._ ***/ beforeSend?: Function | null,\r\n\t/*** _Request Timeout._ ***/ timeout?: number,\r\n\t/*** _Before request is sent._ ***/ handleError?: boolean,\r\n};\r\n\r\ndeclare type Selector = StringOrNull;\r\n\r\n/**\r\n * {string|null = null}\r\n */\r\ndeclare type StringOrNull = string | null;\r\n\r\ndeclare type ValidationProps = {\r\n\t/*** _id attribute of selected form field._ ***/ id: string,\r\n\t/*** _selector of the form group element for selected form field._ ***/ formGroup: string,\r\n\t/*** _selector of the validation field for selected form field._ ***/ validationField: string,\r\n\t/*** _selector of the validation valid icon for the selected form field._ ***/ validIcon: string,\r\n\t/*** _selector of the validation invalid icon for the selected form field._ ***/ invalidIcon: string,\r\n\t/*** _selector of the validation icons field for the selected form field._ ***/ validationIconField: string\r\n};\r\n\r\ndeclare type ValidatorConfigObject = {\r\n\tregExp?: {\r\n\t\tcardCVV?: RegExp | null,\r\n\t\tcardNumber?: RegExp | null,\r\n\t\temail?: RegExp | null,\r\n\t\tname?: RegExp | null,\r\n\t\tphone?: RegExp | null,\r\n\t\tpassword?: RegExp | null,\r\n\t\tusername?: RegExp | null,\r\n\t},\r\n\tconfig?: {\r\n\t\tcapslockAlert?: boolean,\r\n\t\tshowIcons?: boolean,\r\n\t\tshowPassword?: boolean,\r\n\t\tvalidateCard?: boolean,\r\n\t\tvalidateEmail?: boolean,\r\n\t\tvalidateName?: boolean,\r\n\t\tvalidatePassword?: boolean,\r\n\t\tvalidatePhone?: boolean,\r\n\t\tvalidateUsername?: boolean,\r\n\t\tnativeValidation?: boolean,\r\n\t\tuseDefaultStyling?: boolean,\r\n\t\tpasswordConfirmId?: ('password_confirmation' | string),\r\n\t\tpasswordId?: ('password' | string),\r\n\t\tinitWrapper?: ('.form-group' | string),\r\n\t},\r\n\tstepForm?: {\r\n\t\tuse?: boolean,\r\n\t\tplugin?: boolean,\r\n\t\tconfig?: {\r\n\t\t\tslides?: boolean,\r\n\t\t\tstep?: string,\r\n\t\t\tswitch?: string,\r\n\t\t}\r\n\t}\r\n\ttexts?: {\r\n\t\tcapslock?: string,\r\n\t\temailFormat?: string | null,\r\n\t\tnameFormat?: string | null,\r\n\t\tphoneFormat?: string | null,\r\n\t\tpasswordFormat?: string | null,\r\n\t\tusernameFormat?: string | null,\r\n\t}\r\n};\r\n\r\ninterface String {\r\n\t/**\r\n\t * Convert string to title cased string.\r\n\t *\r\n\t * @param separator {boolean=false}\r\n\t * @returns {String} Title cased string.\r\n\t */\r\n\ttoTitleCase(separator: boolean): string;\r\n}\r\n\r\n/*interface Function {\r\n\t/!**\r\n\t * Get Functions argument-value pair\r\n\t *\r\n\t * @return {object} Functions argument-value pair\r\n\t *!/\r\n\tgetArgs(): object;\r\n}*/\r\n\r\ninterface HTMLElement extends HTMLCollection {\r\n}\r\n\r\ninterface HTMLElementWithListenerArray extends HTMLElement {\r\n\tlisteners?: HTMLListenerArray;\r\n}\r\n\r\ndeclare interface FuxcelBaseInterface {\r\n\tget fieldAttributes(): FieldAttributes;\r\n\t\r\n\tget prevObj(): { length: number };\r\n\t\r\n\tget toArray(): IterableElement\r\n}\r\n\r\ndeclare interface FuxcelInterface {\r\n\tget classes(): DOMTokenList;\r\n\t\r\n\tget hasFocus(): Promise<any>;\r\n\t\r\n\tget isDisabled(): boolean;\r\n\t\r\n\tget innerText(): string;\r\n\t\r\n\tget outerText(): string;\r\n\t\r\n\tget innerHTML(): string;\r\n\t\r\n\tget outerHTML(): string;\r\n\t\r\n\tget formValidator(): FuxcelValidator;\r\n\t\r\n\tget modal(): FuxcelModal;\r\n\t\r\n\thasClass(token: string): boolean;\r\n\t\r\n\tputClass(...tokenList: string[]): Fuxcel;\r\n\t\r\n\treplaceClass(oldToken: string, newToken: string): Fuxcel;\r\n\t\r\n\tremoveClass(...tokenList: string[]): Fuxcel;\r\n\t\r\n\teach(callback: ((element: Fuxcel, index: number) => void)): void;\r\n\t\r\n\tattrib(name: string | object, value?: boolean | string | null): Fuxcel | string;\r\n\t\r\n\tdataAttrib(name: string | object, value?: boolean | string | null): Fuxcel | string;\r\n\t\r\n\tprop(name: string | object, value?: boolean | string | null): Fuxcel | string;\r\n\t\r\n\tstyle(name: string | object, value?: boolean | string | null): Fuxcel | string;\r\n\t\r\n\tlistAttrib(): object;\r\n\t\r\n\tlistProp(): object;\r\n\t\r\n\tremoveAttrib(...name: string[]): Fuxcel;\r\n\t\r\n\tremoveDataAttrib(...name: string[]): Fuxcel;\r\n\t\r\n\tremoveProp(...name: string[]): Fuxcel;\r\n\t\r\n\tchildren(selector: Selector): Fuxcel;\r\n\t\r\n\tdescendants(selector: Selector): Fuxcel;\r\n\t\r\n\tparents(selector: Selector): Fuxcel;\r\n\t\r\n\tprevSiblings(selector: Selector): Fuxcel;\r\n\t\r\n\tsiblings(selector: Selector): Fuxcel;\r\n\t\r\n\tdisable(disabled: boolean): Fuxcel;\r\n\t\r\n\thandleFormSubmit({uri, method, data, dataType, beforeSend, timeout, handleError}: FXFormSubmitType): void;\r\n\t\r\n\thasScrollBar(direction: ('horizontal' | 'vertical' | null)): boolean;\r\n\t\r\n\tinsertHTML(value: string, position: ('affix' | 'prefix' | 'postfix' | 'suffix' | null)): Fuxcel;\r\n\t\r\n\tisElement(tagName: string | HTMLElementTagNameMap): boolean;\r\n\t\r\n\tmatchSelector(selector: Selector): boolean;\r\n\t\r\n\toff(...events: string[]): Fuxcel;\r\n\t\r\n\ttoggleButtonLoadState(isLoading: boolean): void;\r\n\t\r\n\ttoggleFormSubmitButtonState(isLoading: boolean): void;\r\n\t\r\n\ttrigger(event: string, type: ('mouse' | 'keyboard' | null)): Fuxcel;\r\n\t\r\n\tupon(events: string | string[] | object, listener?: ((e: CustomEvent | Event) => any) | boolean, option?: boolean): Fuxcel;\r\n\t\r\n\tvalue(value: StringOrNull): Fuxcel | string | null;\r\n}\r\n\r\ndeclare interface FuxcelValidatorInterface {\r\n\tget canBeValidated(): boolean;\r\n\t\r\n\tget errorBag(): object;\r\n\t\r\n\tget errorCount(): number;\r\n\t\r\n\tget getErrors(): object | void;\r\n\t\r\n\tget formFieldElements(): object | void;\r\n\t\r\n\tget isEmailField(): boolean;\r\n\t\r\n\tget isNameField(): boolean;\r\n\t\r\n\tget isPasswordField(): boolean;\r\n\t\r\n\tget isPhoneField(): boolean;\r\n\t\r\n\tget isUsernameField(): boolean;\r\n\t\r\n\tget stepFromField(): number;\r\n\t\r\n\tget validationProps(): ValidationProps;\r\n\t\r\n\tget validatorConfig(): ValidatorConfigObject;\r\n\t\r\n\tinit(config: ValidatorConfigObject | null): FuxcelValidator;\r\n\t\r\n\trenderMessage(message: StringOrNull, renderType: StringOrNull): FuxcelValidator;\r\n\t\r\n\trenderValidationErrors(errors: object, messageOrCallbackFn: ((fx: FuxcelValidator, e?: CustomEvent) => any) | StringOrNull, callbackFn: ((fx: FuxcelValidator, e?: CustomEvent) => any) | null): void;\r\n\t\r\n\tshowError(message: StringOrNull): void;\r\n\t\r\n\tshowSuccess(message: StringOrNull): void;\r\n\t\r\n\ttoggleValidation(): FuxcelValidator;\r\n\t\r\n\tundoValidation(destroyValidation: boolean): FuxcelValidator;\r\n\t\r\n\tstepErrorBag(step: number | string): object;\r\n\t\r\n\tstepErrorCount(step: number | string): number;\r\n\t\r\n\tvalidateCardCVV(regExp: RegExp, customFormatEx: StringOrNull): FuxcelValidator;\r\n\t\r\n\tvalidateCardNumber(regExp: RegExp, customFormatEx: StringOrNull): FuxcelValidator;\r\n\t\r\n\tvalidateEmail(regExp: RegExp, customFormatEx: StringOrNull): FuxcelValidator;\r\n\t\r\n\tvalidateField(message: StringOrNull, isError: boolean): FuxcelValidator;\r\n\t\r\n\tvalidateName(regExp: RegExp, customFormatEx: StringOrNull): FuxcelValidator;\r\n\t\r\n\tvalidatePassword(regExp: RegExp, customFormatEx: StringOrNull): FuxcelValidator;\r\n\t\r\n\tvalidatePhone(regExp: RegExp, customFormatEx: StringOrNull): FuxcelValidator;\r\n\t\r\n\tvalidateRegex(regExpOrFn: Function | RegExp, message?: StringOrNull): FuxcelValidator;\r\n\t\r\n\tvalidateUsername(regExp: RegExp, customFormatEx: StringOrNull): FuxcelValidator;\r\n}\r\n\r\n\r\ndeclare interface FuxcelStepsInterface {\r\n\tget context(): FuxcelSteps\r\n\t\r\n\tget formSteps(): object | (number | string)[]\r\n\t\r\n\tstepErrors(step: number | string | null): object | void\r\n}\r\n\r\ndeclare interface FuxcelModalInterface {\r\n\thide(destroy: boolean): void;\r\n\t\r\n\tshow(escKey?: boolean): void;\r\n\t\r\n\ttoggle(): void;\r\n}\r\n\r\ndeclare interface FXInterface {\r\n\t(selector: string | IterableElement | any, context?: string | IterableElement | any): Fuxcel;\r\n\t\r\n\tfetch: ({uri, method, data, dataType, beforeSend, timeout, onComplete, onError, onSuccess}: FXRequestType) => void;\r\n\t\r\n\tmodal: ({title, type, content, confirmButtonText, cancelButtonText, html, onConfirm, onCancel}: FXModalType) => void;\r\n\t\r\n\tonDocumentLoad: ((listener: (e: Event) => void) => void)\r\n\t\r\n\tpassLuhnAlgo: (input: any | string | number) => boolean;\r\n}\r\n\r\ndeclare interface ResponseData extends Response {\r\n\tok: boolean;\r\n\tstatus: number;\r\n\tstatusText: string;\r\n\tresponseText?: string;\r\n\tresponseJSON?: object;\r\n}\r\n\r\ndeclare interface TypeOfInterface {\r\n\t(value: any): boolean;\r\n}\r\n\r\n/**\r\n *\r\n * @param timeout {number|string}\r\n * @param iteration {number}\r\n * @param display {string}\r\n * @returns {FXAnimationReturn}\r\n */\r\nconst animations: FXAnimation = ({timeout = 300, iterations = 1, display = 'unset'}: FXAnimationType): FXAnimationReturn => {\r\n\treturn {\r\n\t\tblink: {\r\n\t\t\tname: 'blink',\r\n\t\t\tonBegin: {},\r\n\t\t\tonFinished: {},\r\n\t\t\toptions: {\r\n\t\t\t\tkeyFrames: [{opacity: 1}, {opacity: 0.8}, {opacity: 0.5}, {opacity: 0.3}, {opacity: 0.1}, {opacity: 0.3}, {opacity: 0.5}, {opacity: 0.8}, {opacity: 1}],\r\n\t\t\t\ttiming: {duration: timeout, iterations: iterations}\r\n\t\t\t}\r\n\t\t},\r\n\t\tfadeIn: {\r\n\t\t\tname: 'fadein',\r\n\t\t\tonBegin: {display: display},\r\n\t\t\tonFinished: {},\r\n\t\t\toptions: {\r\n\t\t\t\tkeyFrames: [{opacity: 0}, {opacity: 1}],\r\n\t\t\t\ttiming: {duration: timeout, iterations: iterations}\r\n\t\t\t}\r\n\t\t},\r\n\t\tfadeOut: {\r\n\t\t\tname: 'fadeout',\r\n\t\t\tonBegin: {display: display},\r\n\t\t\tonFinished: {display: 'none'},\r\n\t\t\toptions: {\r\n\t\t\t\tkeyFrames: [{opacity: 1}, {opacity: 0}],\r\n\t\t\t\ttiming: {duration: timeout, iterations: iterations}\r\n\t\t\t}\r\n\t\t},\r\n\t\tslideInDown: {\r\n\t\t\tname: 'slideindown',\r\n\t\t\tonBegin: {display: display},\r\n\t\t\tonFinished: {},\r\n\t\t\toptions: {\r\n\t\t\t\tkeyFrames: [{transform: 'translate3d(0, 100%, 0)', visibility: 'hidden'}, {transform: 'translate3d(0, 0, 0)', visibility: 'visible'}],\r\n\t\t\t\ttiming: {duration: timeout, iterations: iterations}\r\n\t\t\t},\r\n\t\t},\r\n\t\tslideOutDown: {\r\n\t\t\tname: 'slideoutdown',\r\n\t\t\tonBegin: {display: display},\r\n\t\t\tonFinished: {display: 'none'},\r\n\t\t\toptions: {\r\n\t\t\t\tkeyFrames: [{transform: 'translate3d(0, 0, 0)', visibility: 'visible'}, {transform: 'translate3d(0, 100%, 0)', visibility: 'hidden'}],\r\n\t\t\t\ttiming: {duration: timeout, iterations: iterations}\r\n\t\t\t}\r\n\t\t},\r\n\t\tslideOutUp: {\r\n\t\t\tname: 'slideoutup',\r\n\t\t\tonBegin: {display: display},\r\n\t\t\tonFinished: {display: 'none'},\r\n\t\t\toptions: {\r\n\t\t\t\tkeyFrames: [{transform: 'translate3d(0, 0, 0)', visibility: 'visible'}, {transform: 'translate3d(0, -100%, 0)', visibility: 'hidden'}],\r\n\t\t\t\ttiming: {duration: timeout, iterations: iterations}\r\n\t\t\t}\r\n\t\t},\r\n\t\tslideInLeft: {\r\n\t\t\tname: 'slideinleft',\r\n\t\t\tonBegin: {display: display},\r\n\t\t\tonFinished: {},\r\n\t\t\toptions: {\r\n\t\t\t\tkeyFrames: [{transform: 'translate3d(-100%, 0, 0)', visibility: 'visible'}, {transform: 'translate3d(0, 0, 0)'}],\r\n\t\t\t\ttiming: {duration: timeout, iterations: iterations}\r\n\t\t\t}\r\n\t\t},\r\n\t\tslideInRight: {\r\n\t\t\tname: 'slideinright',\r\n\t\t\tonBegin: {display: display},\r\n\t\t\tonFinished: {},\r\n\t\t\toptions: {\r\n\t\t\t\tkeyFrames: [{transform: 'translate3d(100%, 0, 0)', visibility: 'visible'}, {transform: 'translate3d(0, 0, 0)'}],\r\n\t\t\t\ttiming: {duration: timeout, iterations: iterations}\r\n\t\t\t}\r\n\t\t},\r\n\t\tslideOutLeft: {\r\n\t\t\tname: 'slideoutleft',\r\n\t\t\tonBegin: {display: display},\r\n\t\t\tonFinished: {display: 'none'},\r\n\t\t\toptions: {\r\n\t\t\t\tkeyFrames: [{transform: 'translate3d(0, 0, 0)'}, {visibility: 'hidden', transform: 'translate3d(-100%, 0, 0)'}],\r\n\t\t\t\ttiming: {duration: timeout, iterations: iterations}\r\n\t\t\t}\r\n\t\t},\r\n\t\tslideOutRight: {\r\n\t\t\tname: 'slideoutright',\r\n\t\t\tonBegin: {display: display},\r\n\t\t\tonFinished: {display: 'none'},\r\n\t\t\toptions: {\r\n\t\t\t\tkeyFrames: [{transform: 'translate3d(0, 0, 0)'}, {visibility: 'hidden', transform: 'translate3d(100%, 0, 0)'}],\r\n\t\t\t\ttiming: {duration: timeout, iterations: iterations}\r\n\t\t\t}\r\n\t\t},\r\n\t\tspaceLettersBig: {\r\n\t\t\tname: 'spacelettersbig',\r\n\t\t\tonBegin: {},\r\n\t\t\tonFinished: {marginRight: '50px'},\r\n\t\t\toptions: {\r\n\t\t\t\tkeyFrames: [{marginRight: 0}, {marginRight: '50px'}],\r\n\t\t\t\ttiming: {duration: timeout, iterations: iterations}\r\n\t\t\t}\r\n\t\t},\r\n\t\tspaceLettersSmall: {\r\n\t\t\tname: 'spaceletterssmall',\r\n\t\t\tonBegin: {},\r\n\t\t\tonFinished: {marginRight: '3px'},\r\n\t\t\toptions: {\r\n\t\t\t\tkeyFrames: [{marginRight: '3px'}, {marginRight: '3px'},],\r\n\t\t\t\ttiming: {duration: timeout, iterations: iterations}\r\n\t\t\t}\r\n\t\t},\r\n\t\tunspaceLetters: {\r\n\t\t\tname: 'unspaceletters',\r\n\t\t\tonBegin: {},\r\n\t\t\tonFinished: {marginRight: 0},\r\n\t\t\toptions: {\r\n\t\t\t\tkeyFrames: [{marginRight: 0}],\r\n\t\t\t\ttiming: {duration: timeout, iterations: iterations}\r\n\t\t\t}\r\n\t\t},\r\n\t\tzoomIn: {\r\n\t\t\tname: 'zoomin',\r\n\t\t\tonBegin: {},\r\n\t\t\tonFinished: {width: 'inherit', height: 'inherit'},\r\n\t\t\toptions: {\r\n\t\t\t\tkeyFrames: [{width: '500px', height: '500px'}, {width: '150px', height: '150px'}],\r\n\t\t\t\ttiming: {duration: timeout, iterations: iterations}\r\n\t\t\t}\r\n\t\t},\r\n\t}\r\n}\r\n\r\nconst pushPropToWindow = (prop: string, value: any) => {\r\n\t(window as any)[prop] = value;\r\n}\r\n\r\n/**\r\n * Creates new Fuxcel Object with selected element.\r\n *\r\n * @param selector {string|IterableElement|any} Selectable string or iterable.\r\n * @param context {string|IterableElement|any} Context to select from.\r\n * @return {Fuxcel} New Fuxcel Object.\r\n */\r\nconst fx: FXInterface = (selector: string | IterableElement | any, context: string | IterableElement | any = null): Fuxcel => new Fuxcel(selector, context);\r\n\r\n/**\r\n * Checks if the given value is of type boolean.\r\n *\r\n * @param value {any} Value to check.\r\n * @return {boolean} true if the given value is of type boolean; false otherwise.\r\n */\r\nconst isBool: TypeOfInterface = (value: any): boolean => {\r\n\treturn typeof value === 'boolean';\r\n}\r\n\r\n/**\r\n * Checks if the given value is defined (not null && not undefined && not an empty string).\r\n *\r\n * @param value {any} Value to check.\r\n * @return {boolean} true if the given value is set; false otherwise.\r\n */\r\nconst isDefined: TypeOfInterface = (value: any): boolean => {\r\n\treturn value !== undefined && value !== null && value !== '';\r\n}\r\n\r\n/**\r\n * Checks if the given value is of type function.\r\n *\r\n * @param value {any} Value to check.\r\n * @return {boolean} true if the given value is of type function; false otherwise.\r\n */\r\nconst isFunction: TypeOfInterface = (value: any): boolean => {\r\n\treturn typeof value === 'function';\r\n}\r\n\r\n/**\r\n * Checks if the given value is of type object.\r\n *\r\n * @param value {any} Value to check.\r\n * @return {boolean} true if the given value is of type boolean; false otherwise.\r\n */\r\nconst isObject: TypeOfInterface = (value: any): boolean => {\r\n\treturn typeof value === 'object';\r\n}\r\n\r\n/**\r\n * Checks if the given value is of type string.\r\n *\r\n * @param value {any} Value to check.\r\n * @return {boolean} true if the given value is of type string; false otherwise.\r\n */\r\nconst isString: TypeOfInterface = (value: any): boolean => {\r\n\treturn typeof value === 'string' && true;\r\n}\r\n\r\n/**\r\n * Parse the given value and get its boolean value.\r\n *\r\n * @param value {any} Value to parse.\r\n * @return {boolean} Its boolean value; true or false.\r\n */\r\nconst parseBool: TypeOfInterface = (value: any): boolean => {\r\n\tswitch (isString(value) ? value.toString().toLowerCase() : value) {\r\n\t\tcase true:\r\n\t\tcase 'true':\r\n\t\tcase 1:\r\n\t\tcase '1':\r\n\t\tcase 'on':\r\n\t\tcase 'yes':\r\n\t\t\treturn true;\r\n\t\tdefault:\r\n\t\t\treturn false;\r\n\t}\r\n}\r\n\r\n/**\r\n * Convert string to title cased string.\r\n *\r\n * @param separators {boolean=false}\r\n * @returns {String} Title cased string.\r\n */\r\nString.prototype.toTitleCase = function (separators: boolean = false): string {\r\n\tconst value = this;\r\n\t\r\n\tlet titleCased = '',\r\n\t\tvalueSplit = value.split(separators ? /([ _-])/gi : /[ _-]/gi);\r\n\t\r\n\tvalueSplit.forEach((word: string, key: number) => {\r\n\t\tlet wordSplit = word.toLowerCase().split(''),\r\n\t\t\tfirstChar = wordSplit[0];\r\n\t\twordSplit[0] = wordSplit[0] ? firstChar.toUpperCase() : '';\r\n\t\ttitleCased += separators ? wordSplit.join('') : (wordSplit.join('') + ((key <= valueSplit.length - 1) ? ' ' : ''));\r\n\t});\r\n\treturn String(titleCased);\r\n}\r\n\r\n\r\nclass TimeoutError extends Error {\r\n\tprivate status: number;\r\n\tprivate code: string;\r\n\t\r\n\tconstructor(message = 'Request timed out', status = 408, code = 'ETIMEDOUT') {\r\n\t\tsuper(message);\r\n\t\tthis.name = 'TimeoutError';\r\n\t\tthis.status = status;\r\n\t\tthis.code = code;\r\n\t}\r\n}\r\n\r\nclass FuxcelBase implements FuxcelBaseInterface {\r\n\tlength: number = 0;\r\n\tprotected prev: { length: number } = {length: 0};\r\n\t\r\n\t/**\r\n\t * Initialize the plugin\r\n\t *\r\n\t * @param selector {string|IterableElement|any} Selectable string or iterable.\r\n\t * @param context {string|IterableElement|any} Context to select from.\r\n\t */\r\n\tconstructor(selector: string | IterableElement | any, context?: string | IterableElement | any) {\r\n\t\tconst INSTANCE: FuxcelBase = this;\r\n\t\tconst selectedElements: IterableElement | NodeListOf<HTMLElement> | undefined = <HTMLElement[] | NodeListOf<HTMLElement>>init();\r\n\t\tconst documentDOMArray: IterableElement = <Document[]>INSTANCE.#_toArray(document);\r\n\t\t\r\n\t\tdocumentDOMArray.forEach((value: any, key: number) => {\r\n\t\t\t(<any>INSTANCE.prev)[key] = value;\r\n\t\t\tINSTANCE.prev.length++;\r\n\t\t});\r\n\t\t\r\n\t\tselectedElements && selectedElements.forEach((value, key) => {\r\n\t\t\t(<any>INSTANCE)[key] = value;\r\n\t\t\tINSTANCE.length++\r\n\t\t});\r\n\t\t\r\n\t\tfunction init(): IterableElement | NodeListOf<HTMLElement> | undefined {\r\n\t\t\tlet selected: NodeListOf<HTMLElement>;\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tconst _context: HTMLElement = <HTMLElement>(context && ((isString(context) ?\r\n\t\t\t\t\tINSTANCE.#_toArray(document.querySelector(context)) :\r\n\t\t\t\t\tINSTANCE.#_toArray(context)))[0]);\r\n\t\t\t\t\r\n\t\t\t\tif (INSTANCE.#_isHTMLElement(selector) || INSTANCE.#_isIterable(selector)) {\r\n\t\t\t\t\tconst target: IterableElement = <HTMLElement[]>INSTANCE.#_toArray(selector);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (context) {\r\n\t\t\t\t\t\tif (target.length) {\r\n\t\t\t\t\t\t\ttarget.forEach((value: HTMLElement) => value.dataset.fuxcelTempId = 'fuxcel-temp-selector');\r\n\t\t\t\t\t\t\tselected = _context.querySelectorAll('[data-fuxcel-temp-id=\"fuxcel-temp-selector\"]');\r\n\t\t\t\t\t\t\ttarget.forEach((value: HTMLElement) => delete value.dataset.fuxcelTempId);\r\n\t\t\t\t\t\t\treturn selected;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn target;\r\n\t\t\t\t}\r\n\t\t\t\treturn context && _context ? _context.querySelectorAll(selector) : document.querySelectorAll(selector);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.trace(e);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn INSTANCE;\r\n\t}\r\n\t\r\n\tstatic get #_getCurrentScriptFilename(): string | null {\r\n\t\ttry {\r\n\t\t\tthrow new Error();\r\n\t\t} catch (e) {\r\n\t\t\tif (e instanceof Error) {\r\n\t\t\t\tconst stackLines = e.stack?.split('\\n');\r\n\t\t\t\tconst stackLineSplit = stackLines ? stackLines[0].split('/') : [];\r\n\t\t\t\t\r\n\t\t\t\tif (stackLineSplit.length) {\r\n\t\t\t\t\tconst guessedNameArray = (stackLineSplit[stackLineSplit.length - 1]).split(':');\r\n\t\t\t\t\treturn guessedNameArray.length ? guessedNameArray[0] : null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\tstatic get #_getCurrentScriptSrc(): string | undefined {\r\n\t\tconst scripts: IterableElement = <HTMLElement[]>Array.from(document.scripts);\r\n\t\t\r\n\t\tfor (const script of scripts) {\r\n\t\t\tconst src = script.getAttribute('src');\r\n\t\t\tconst srcSplit = src?.split(/[\\\\/]/gi);\r\n\t\t\tconst name = srcSplit?.length ? srcSplit[srcSplit.length - 1] : null\r\n\t\t\t\r\n\t\t\tif (FuxcelBase.#_getCurrentScriptFilename && name)\r\n\t\t\t\tif (FuxcelBase.#_getCurrentScriptFilename.toLowerCase() === name.toLowerCase())\r\n\t\t\t\t\treturn src?.toLocaleLowerCase();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Checks if the given selected element is iterable.\r\n\t *\r\n\t * @param element {any}\r\n\t * @private\r\n\t * @return {boolean} Returns true if the element is iterable; false otherwise.\r\n\t */\r\n\t#_isIterable(element: any): boolean {\r\n\t\treturn !!FuxcelBase.#_constructors.iterable.filter(value => element.constructor.name.toLowerCase().includes('collection') || value === element.constructor.name.toLowerCase()).length || Array.isArray(element);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Checks if the given selected element is an HTML Element.\r\n\t *\r\n\t * @param element {HTMLElement|any} Given Element\r\n\t * @private\r\n\t * @return {boolean} Returns true if the element is an HTMML Element; false otherwise.\r\n\t */\r\n\t#_isHTMLElement(element: HTMLElement | any): boolean {\r\n\t\treturn !!FuxcelBase.#_constructors.html.filter(value => element.constructor.name.toLowerCase().includes(value)).length;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Wraps given element(s) in an array.\r\n\t *\r\n\t * @param element {any}\r\n\t * @private\r\n\t * @return {IterableElement} Returns HTML Element(s) wrapped in an array.\r\n\t */\r\n\t#_toArray(element: any): IterableElement {\r\n\t\treturn this.#_isIterable(element) ? <IterableElement>Array.from(element) : [element];\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns an Object containing {FieldAttributes} attributes of the element.\r\n\t * @return {FieldAttributes}\r\n\t */\r\n\tget fieldAttributes(): FieldAttributes {\r\n\t\tconst selected = <HTMLInputElement[] | HTMLSelectElement[] | HTMLTextAreaElement[]>this.toArray;\r\n\t\treturn {\r\n\t\t\tid: selected[0].getAttribute('id') && selected[0].getAttribute('id')?.toLowerCase(),\r\n\t\t\ttype: selected[0].getAttribute('type') && selected[0].getAttribute('type')?.toLowerCase(),\r\n\t\t\tfxId: selected[0].getAttribute('type') && selected[0].getAttribute('type')?.toLowerCase(),\r\n\t\t\tfxRole: selected[0].getAttribute('type') && selected[0].getAttribute('type')?.toLowerCase(),\r\n\t\t\tformId: selected[0].form && selected[0].form.id && selected[0].form.id.toLowerCase()\r\n\t\t};\r\n\t}\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tget prevObj(): { length: number } {\r\n\t\treturn this.prev;\r\n\t}\r\n\t\r\n\tstatic get guessPath() {\r\n\t\tconst fullPath = FuxcelBase.#_getCurrentScriptSrc;\r\n\t\tconst fullPathArray = fullPath?.split(/[\\\\/]/gi);\r\n\t\tfullPathArray?.splice(fullPathArray?.length - 1);\r\n\t\treturn fullPathArray?.join('/') ?? null;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {Array}\r\n\t */\r\n\tget toArray(): IterableElement {\r\n\t\t/* if (!this.length)\r\n\t\t\tconsole.trace('No element selected'); */\r\n\t\treturn this.#_toArray(this);\r\n\t}\r\n\t\r\n\tstatic get #_constructors(): { iterable: any[], html: any[] } {\r\n\t\tconst html: any[] = ['html'];\r\n\t\tconst iterable: any[] = [\r\n\t\t\t'bsutilities',\r\n\t\t\t'fuxcel',\r\n\t\t\t'fuxcelbase',\r\n\t\t\t'fuxcelmodal',\r\n\t\t\t'fuxcelsteps',\r\n\t\t\t'fuxcelvalidator',\r\n\t\t\t'jquery',\r\n\t\t\t'nodelist',\r\n\t\t\t'object',\r\n\t\t\t's',\r\n\t\t\t'collection'\r\n\t\t];\r\n\t\treturn {iterable: iterable, html: html};\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns true if the device is mobile device; false otherwise.\r\n\t */\r\n\tstatic get isMobileDevice(): boolean {\r\n\t\treturn navigator.userAgent.toLowerCase().includes('mobile');\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns true if the device supports touch; false otherwise.\r\n\t */\r\n\tstatic get pointerIsTouch(): boolean {\r\n\t\treturn window.matchMedia(\"(pointer: coarse)\").matches;\r\n\t}\r\n}\r\n\r\nclass Fuxcel extends FuxcelBase implements FuxcelInterface {\r\n\tstatic #_buttonLoaderClass: string = '.btn-loader';\r\n\tstatic #_pluginPath: string | null = this.guessPath;\r\n\t\r\n\tconstructor(selector: string | IterableElement | any, context?: string | IterableElement | any) {\r\n\t\tsuper(selector, context);\r\n\t}\r\n\t\r\n\t#_formatDataAttrib(name: string): string {\r\n\t\tlet replaced: string = '',\r\n\t\t\tnameSplit: string[] = name.toString().split('-');\r\n\t\t\r\n\t\tnameSplit.forEach((split: string, idx: number) => {\r\n\t\t\tif (idx) {\r\n\t\t\t\tlet splinted = split.split(''),\r\n\t\t\t\t\tfirstWord = splinted[0];\r\n\t\t\t\tsplinted[0] = firstWord.toUpperCase();\r\n\t\t\t\treplaced += splinted.join('');\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn `${nameSplit[0]}${replaced}`;\r\n\t}\r\n\t\r\n\t#_setAttrib(name: string | object, value?: string): Fuxcel {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\t\r\n\t\tif (isString(name) && (isString(value) || isDefined(value))) {\r\n\t\t\tselected.forEach((element: HTMLElement) => element.setAttribute(<string>name, <string>value));\r\n\t\t} else if (isObject(name)) {\r\n\t\t\tObject.keys(name).forEach(key =>\r\n\t\t\t\tselected.forEach((element: HTMLElement) => element.setAttribute(key, <string>(<any>name)[key])));\r\n\t\t} else {\r\n\t\t\tif (isString(name))\r\n\t\t\t\tthrow (`Argument for \\`name\\` expects a String or an Object in function \\`attrib()\\`. ${typeof name} given.`);\r\n\t\t\telse\r\n\t\t\t\tthrow (`Function \\`attrib()\\` expects 1-2 arguments. None given.`);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t#_setDataAttrib(name: string | object, value?: string): Fuxcel {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\t\r\n\t\tif (isString(name) && (isString(value) || isDefined(value))) {\r\n\t\t\tselected.forEach((element: HTMLElement) => element.dataset[<any>name] = value);\r\n\t\t} else if (isObject(name)) {\r\n\t\t\tObject.keys(name).forEach(key => {\r\n\t\t\t\tselected.forEach((element: HTMLElement) => element.dataset[key] = (<any>name)[key]);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tif (isString(name))\r\n\t\t\t\tthrow (`Argument for \\`name\\` expects a String or an Object in function \\`dataAttrib()\\`. ${typeof name} given.`);\r\n\t\t\telse\r\n\t\t\t\tthrow (`Function \\`dataAttrib()\\` expects 1-2 arguments. None given.`);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t#_setPrev(prevObj: Fuxcel): Fuxcel {\r\n\t\tthis.prev = new Fuxcel(prevObj);\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t#_setProp(name: string | object, value?: string): Fuxcel {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\t\r\n\t\tif (isString(name) && (isString(value) || isBool(value) || isDefined(value))) {\r\n\t\t\tselected.forEach((element: HTMLElement) => (<any>element)[<any>name] = value);\r\n\t\t} else if (isObject(name)) {\r\n\t\t\tObject.keys(name).forEach(key => {\r\n\t\t\t\tselected.forEach((element: HTMLElement) => (<any>element)[key] = (<any>name)[key]);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tif (isString(name))\r\n\t\t\t\tthrow (`Argument for \\`name\\` expects a String or an Object in function \\`prop()\\`. ${typeof name} given.`);\r\n\t\t\telse\r\n\t\t\t\tthrow (`Function \\`prop()\\` expects 1-2 arguments. None given.`);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t#_setStyle(name: string | object, value?: string): Fuxcel {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\t\r\n\t\tif (isString(name) && (isString(value) || isBool(value) || isDefined(value))) {\r\n\t\t\tselected.forEach((element: HTMLElement) => (<any>element.style)[<any>name] = value);\r\n\t\t} else if (isObject(name)) {\r\n\t\t\tObject.keys(name).forEach(key => {\r\n\t\t\t\tselected.forEach((element: HTMLElement) => element.style[<any>key] = (<any>name)[key]);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tif (isString(name))\r\n\t\t\t\tthrow (`Argument for \\`name\\` expects a String or an Object in function \\`prop()\\`. ${typeof name} given.`);\r\n\t\t\telse\r\n\t\t\t\tthrow (`Function \\`prop()\\` expects 1-2 arguments. None given.`);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Perform given animation.\r\n\t *\r\n\t * @param animation\r\n\t * @private\r\n\t * @return {Promise<Fuxcel>}\r\n\t */\r\n\t#_animate(animation: FXAnimationOptions): Promise<Fuxcel> {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\treturn new Promise(resolve => selected.forEach((element: Element) => {\r\n\t\t\tObject.keys(animation.onBegin).length && fx(element).style(animation.onBegin);\r\n\t\t\telement.animate(animation.options.keyFrames, animation.options.timing).finished.then(() => {\r\n\t\t\t\tObject.keys(animation.onFinished).length && fx(element).style(animation.onFinished)\r\n\t\t\t\tresolve(this);\r\n\t\t\t});\r\n\t\t}));\r\n\t}\r\n\t\r\n\t/**\r\n\t * Perform Fadeout animation on selected element.\r\n\t *\r\n\t * @param timeout {number} Animation duration.\r\n\t * @param iteration\r\n\t * @param display\r\n\t * @return {Promise<Fuxcel>}\r\n\t */\r\n\tfadeout(timeout?: number | string, iteration?: number | string, display?: string): Promise<Fuxcel> {\r\n\t\tif (typeof timeout === 'string') {\r\n\t\t\tdisplay = timeout;\r\n\t\t\ttimeout = 300;\r\n\t\t} else if (timeout && typeof iteration === 'string') {\r\n\t\t\tdisplay = iteration;\r\n\t\t\titeration = 1;\r\n\t\t}\r\n\t\t\r\n\t\tconst animation: FXAnimationOptions = animations({timeout: timeout, iterations: <number>iteration, display: display}).fadeOut;\r\n\t\treturn this.#_animate(animation);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Perform Fadein animation on selected element.\r\n\t *\r\n\t * @param timeout {number|string} Animation duration.\r\n\t * @param iteration {number|string}\r\n\t * @param display {string}\r\n\t * @return {Promise<Fuxcel>}\r\n\t */\r\n\tfadein(timeout?: number | string, iteration?: number | string, display?: string): Promise<Fuxcel> {\r\n\t\tif (typeof timeout === 'string') {\r\n\t\t\tdisplay = timeout;\r\n\t\t\ttimeout = 300;\r\n\t\t} else if (timeout && typeof iteration === 'string') {\r\n\t\t\tdisplay = iteration;\r\n\t\t\titeration = 1;\r\n\t\t}\r\n\t\t\r\n\t\tconst animation: FXAnimationOptions = animations({timeout: timeout, iterations: <number>iteration, display: display}).fadeIn;\r\n\t\treturn this.#_animate(animation);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Perform a Slidein-down animation on selected element.\r\n\t *\r\n\t * @param timeout {number|string} Animation duration.\r\n\t * @param iteration {number|string}\r\n\t * @param display {string}\r\n\t * @return {Promise<Fuxcel>}\r\n\t */\r\n\tslideindown(timeout?: number | string, iteration?: number | string, display?: string): Promise<Fuxcel> {\r\n\t\tif (typeof timeout === 'string') {\r\n\t\t\tdisplay = timeout;\r\n\t\t\ttimeout = 300;\r\n\t\t} else if (timeout && typeof iteration === 'string') {\r\n\t\t\tdisplay = iteration;\r\n\t\t\titeration = 1;\r\n\t\t}\r\n\t\t\r\n\t\tconst animation: FXAnimationOptions = animations({timeout: timeout, iterations: <number>iteration, display: display}).slideInDown;\r\n\t\treturn this.#_animate(animation);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Perform a Slideout-down animation on selected element.\r\n\t *\r\n\t * @param timeout {number|string} Animation duration.\r\n\t * @param iteration {number|string}\r\n\t * @param display {string}\r\n\t * @return {Promise<Fuxcel>}\r\n\t */\r\n\tslideoutdown(timeout?: number | string, iteration?: number | string, display?: string): Promise<Fuxcel> {\r\n\t\tif (typeof timeout === 'string') {\r\n\t\t\tdisplay = timeout;\r\n\t\t\ttimeout = 300;\r\n\t\t} else if (timeout && typeof iteration === 'string') {\r\n\t\t\tdisplay = iteration;\r\n\t\t\titeration = 1;\r\n\t\t}\r\n\t\t\r\n\t\tconst animation: FXAnimationOptions = animations({timeout: timeout, iterations: <number>iteration, display: display}).slideOutDown;\r\n\t\treturn this.#_animate(animation);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Perform a Slideout-up animation on selected element.\r\n\t *\r\n\t * @param timeout {number|string} Animation duration.\r\n\t * @param iteration {number|string}\r\n\t * @param display {string}\r\n\t * @return {Promise<Fuxcel>}\r\n\t */\r\n\tslideoutup(timeout?: number | string, iteration?: number | string, display?: string): Promise<Fuxcel> {\r\n\t\tif (typeof timeout === 'string') {\r\n\t\t\tdisplay = timeout;\r\n\t\t\ttimeout = 300;\r\n\t\t} else if (timeout && typeof iteration === 'string') {\r\n\t\t\tdisplay = iteration;\r\n\t\t\titeration = 1;\r\n\t\t}\r\n\t\t\r\n\t\tconst animation: FXAnimationOptions = animations({timeout: timeout, iterations: <number>iteration, display: display}).slideOutUp;\r\n\t\treturn this.#_animate(animation);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Perform a Slidein-left animation on selected element.\r\n\t *\r\n\t * @param timeout {number|string} Animation duration.\r\n\t * @param iteration {number|string}\r\n\t * @param display {string}\r\n\t * @return {Promise<Fuxcel>}\r\n\t */\r\n\tslideinleft(timeout?: number | string, iteration?: number | string, display?: string): Promise<Fuxcel> {\r\n\t\tif (typeof timeout === 'string') {\r\n\t\t\tdisplay = timeout;\r\n\t\t\ttimeout = 300;\r\n\t\t} else if (timeout && typeof iteration === 'string') {\r\n\t\t\tdisplay = iteration;\r\n\t\t\titeration = 1;\r\n\t\t}\r\n\t\t\r\n\t\tconst animation: FXAnimationOptions = animations({timeout: timeout, iterations: <number>iteration, display: display}).slideInLeft;\r\n\t\treturn this.#_animate(animation);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Perform a Slideout-left animation on selected element.\r\n\t *\r\n\t * @param timeout {number|string} Animation duration.\r\n\t * @param iteration {number|string}\r\n\t * @param display {string}\r\n\t * @return {Promise<Fuxcel>}\r\n\t */\r\n\tslideoutleft(timeout?: number | string, iteration?: number | string, display?: string): Promise<Fuxcel> {\r\n\t\tif (typeof timeout === 'string') {\r\n\t\t\tdisplay = timeout;\r\n\t\t\ttimeout = 300;\r\n\t\t} else if (timeout && typeof iteration === 'string') {\r\n\t\t\tdisplay = iteration;\r\n\t\t\titeration = 1;\r\n\t\t}\r\n\t\t\r\n\t\tconst animation: FXAnimationOptions = animations({timeout: timeout, iterations: <number>iteration, display: display}).slideOutLeft;\r\n\t\treturn this.#_animate(animation);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Perform a Slidein-right animation on selected element.\r\n\t *\r\n\t * @param timeout {number|string} Animation duration.\r\n\t * @param iteration {number|string}\r\n\t * @param display {string}\r\n\t * @return {Promise<Fuxcel>}\r\n\t */\r\n\tslideinright(timeout?: number | string, iteration?: number | string, display?: string): Promise<Fuxcel> {\r\n\t\tif (typeof timeout === 'string') {\r\n\t\t\tdisplay = timeout;\r\n\t\t\ttimeout = 300;\r\n\t\t} else if (timeout && typeof iteration === 'string') {\r\n\t\t\tdisplay = iteration;\r\n\t\t\titeration = 1;\r\n\t\t}\r\n\t\t\r\n\t\tconst animation: FXAnimationOptions = animations({timeout: timeout, iterations: <number>iteration, display: display}).slideInRight;\r\n\t\treturn this.#_animate(animation);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Perform a Slideout-right animation on selected element.\r\n\t *\r\n\t * @param timeout {number|string} Animation duration.\r\n\t * @param iteration {number|string}\r\n\t * @param display {string}\r\n\t * @return {Promise<Fuxcel>}\r\n\t */\r\n\tslideoutright(timeout?: number | string, iteration?: number | string, display?: string): Promise<Fuxcel> {\r\n\t\tif (typeof timeout === 'string') {\r\n\t\t\tdisplay = timeout;\r\n\t\t\ttimeout = 300;\r\n\t\t} else if (timeout && typeof iteration === 'string') {\r\n\t\t\tdisplay = iteration;\r\n\t\t\titeration = 1;\r\n\t\t}\r\n\t\t\r\n\t\tconst animation: FXAnimationOptions = animations({timeout: timeout, iterations: <number>iteration, display: display}).slideOutRight;\r\n\t\treturn this.#_animate(animation);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Perform a blink animation on selected element.\r\n\t *\r\n\t * @param timeout {number|string} Animation duration.\r\n\t * @param iteration {number|string}\r\n\t * @param display {string}\r\n\t * @return {Promise<Fuxcel>}\r\n\t */\r\n\tblink(timeout?: number | string, iteration?: number | string, display?: string): Promise<Fuxcel> {\r\n\t\tif (typeof timeout === 'string') {\r\n\t\t\tdisplay = timeout;\r\n\t\t\ttimeout = 300;\r\n\t\t} else if (timeout && typeof iteration === 'string') {\r\n\t\t\tdisplay = iteration;\r\n\t\t\titeration = 1;\r\n\t\t}\r\n\t\t\r\n\t\tconst animation: FXAnimationOptions = animations({timeout: timeout, iterations: <number>iteration, display: display}).blink;\r\n\t\treturn this.#_animate(animation);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Perform a Zoom-in animation on selected element.\r\n\t *\r\n\t * @param timeout {number|string} Animation duration.\r\n\t * @param iteration {number|string}\r\n\t * @param display {string}\r\n\t * @return {Promise<Fuxcel>}\r\n\t */\r\n\tzoomin(timeout?: number | string, iteration?: number | string, display?: string): Promise<Fuxcel> {\r\n\t\tif (typeof timeout === 'string') {\r\n\t\t\tdisplay = timeout;\r\n\t\t\ttimeout = 300;\r\n\t\t} else if (timeout && typeof iteration === 'string') {\r\n\t\t\tdisplay = iteration;\r\n\t\t\titeration = 1;\r\n\t\t}\r\n\t\t\r\n\t\tconst animation: FXAnimationOptions = animations({timeout: timeout, iterations: <number>iteration, display: display}).zoomIn;\r\n\t\treturn this.#_animate(animation);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {DOMTokenList} The class list of an element.\r\n\t */\r\n\tget classes(): DOMTokenList {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\treturn selected[0].classList\r\n\t}\r\n\t\r\n\t/**\r\n\t *  @return {Promise<boolean>} A promise with a boolean argument; true if the given element has the mouse focus; false otherwise.\r\n\t */\r\n\tget hasFocus(): Promise<boolean> {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\tconst selector = FuxcelBase.pointerIsTouch ? ':focus' : ':hover';\r\n\t\treturn new Promise(resolve => selected.forEach((element: HTMLElement) => resolve(fx(element).matchSelector(selector))));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {boolean} Returns true if the selected element has the disabled property; false otherwise.\r\n\t */\r\n\tget isDisabled(): boolean {\r\n\t\treturn !!this.prop('disabled');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {string} The Inner Text value of the given element.\r\n\t */\r\n\tget innerText(): string {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\treturn selected[0].innerText;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {string} The Outer Text value of the given element.\r\n\t */\r\n\tget outerText(): string {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\treturn selected[0].outerText;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {string} The Inner HTML value of the given element.\r\n\t */\r\n\tget innerHTML(): string {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\treturn selected[0].innerHTML;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {string} The Outer HTML value of the given element.\r\n\t */\r\n\tget outerHTML(): string {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\treturn selected[0].outerHTML;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {FuxcelValidator} A new instance of the Fuxcel Form Validator.\r\n\t */\r\n\tget formValidator(): FuxcelValidator {\r\n\t\treturn new FuxcelValidator(this);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {FuxcelModal} A new instance of the Fuxcel Modal.\r\n\t */\r\n\tget modal(): FuxcelModal {\r\n\t\treturn new FuxcelModal(this)\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set the Inner Text value for the element\r\n\t *\r\n\t * @param text {string} The Inner Text value.\r\n\t */\r\n\tset innerText(text: string) {\r\n\t\tconst selected = <HTMLElement[]>this.toArray;\r\n\t\t(<HTMLElement>selected[0]).innerText = text;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set the Outer Text value for the element\r\n\t *\r\n\t * @param text {string} The Outer Text value.\r\n\t */\r\n\tset outerText(text: string) {\r\n\t\tconst selected = <HTMLElement[]>this.toArray;\r\n\t\t(<HTMLElement>selected[0]).outerText = text;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return The global Button Loader class.\r\n\t */\r\n\tstatic get buttonLoaderClass(): string {\r\n\t\treturn Fuxcel.#_buttonLoaderClass;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {string|null} The Plugin path.\r\n\t */\r\n\tstatic get path(): string | null {\r\n\t\treturn `${Fuxcel.#_pluginPath?.replace(/\\/$/, '')}/..`;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set the Button Loader class globally.\r\n\t *\r\n\t * @param token {string} Class selector of button loader.\r\n\t */\r\n\tstatic set buttonLoaderClass(token: string) {\r\n\t\tFuxcel.#_buttonLoaderClass = token;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set the Plugin path globally.\r\n\t *\r\n\t * @param path {string} the relative path.\r\n\t */\r\n\tstatic set path(path: string) {\r\n\t\tFuxcel.#_pluginPath = path;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Checks if selected element contains given class.\r\n\t *\r\n\t * @param {string} token\r\n\t * @return {boolean} true if element contains given class; false otherwise.\r\n\t */\r\n\thasClass(token: string): boolean {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\treturn selected[0].classList.contains(token);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add class(es) to the classlist of the selected element.\r\n\t *\r\n\t * @param tokenList {string[]} Comma separated strings of class(es) to add.\r\n\t */\r\n\tputClass(...tokenList: string[]): Fuxcel {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\tselected.forEach((element: HTMLElement) => tokenList.forEach(token => element.classList.add(token)));\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Replace an existing class with the given class.\r\n\t *\r\n\t * _Add the new class old class if not found._\r\n\t *\r\n\t * @param oldToken {string} Old class token.\r\n\t * @param newToken {string} New class token.\r\n\t */\r\n\treplaceClass(oldToken: string, newToken: string): Fuxcel {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\tselected.forEach((element: HTMLElement) => (element.classList.contains(oldToken) ?\r\n\t\t\t\telement.classList.replace(oldToken, newToken) :\r\n\t\t\t\telement.classList.add(newToken)\r\n\t\t));\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Removes the given class(es) from the classlist of the given element.\r\n\t *\r\n\t * @param tokenList {string[]} Comma separated strings of class(es) to remove.\r\n\t */\r\n\tremoveClass(...tokenList: string[]): Fuxcel {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\tselected.forEach((element: HTMLElement) => tokenList.forEach(token => element.classList.remove(token)));\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Perform callback on each selected item\r\n\t *\r\n\t * @param callback {((element: Fuxcel, index: number) => void)}\r\n\t */\r\n\teach(callback: ((element: Fuxcel, index: number) => void)): void {\r\n\t\tconst selected: [] = <[]>this.toArray;\r\n\t\tselected.forEach((element, index) => callback(fx(element), index));\r\n\t}\r\n\t\r\n\tattrib(name: object): Fuxcel;\r\n\tattrib(name: string): string;\r\n\tattrib(name: string, value: string | boolean): Fuxcel;\r\n\t/**\r\n\t * Get or Set the given attribute(s) for the selected element (If a String is passed to the name param).\r\n\t *\r\n\t * _Gets the attribute if only the name is given as a String._\r\n\t *\r\n\t * _Sets the attribute if name and value is given as a String._\r\n\t *\r\n\t * _Sets the given attributes if name is given as an Object (Key-Value Pair)._\r\n\t *\r\n\t * @param name {string|Object} Name of the attribute or a Key-Value pair Object.\r\n\t * @param value {string|null = null} Value to set for the attribute; Not required if an Object is passed as an argument to the name parameter.\r\n\t * @return {Fuxcel|string}\r\n\t */\r\n\tattrib(name: string | object, value?: boolean | string | null): Fuxcel | string {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\t\r\n\t\treturn <Fuxcel | string>(\r\n\t\t\t(name && !value && isString(name)) ?\r\n\t\t\t\t<string>selected[0].getAttribute(<string>name) :\r\n\t\t\t\t<Fuxcel>((isObject(name) ? this.#_setAttrib(name) : this.#_setAttrib(name, <string>value)))\r\n\t\t);\r\n\t}\r\n\t\r\n\tdataAttrib(name: object): Fuxcel;\r\n\tdataAttrib(name: string): string;\r\n\tdataAttrib(name: string, value: string | boolean): Fuxcel;\r\n\t/**\r\n\t * Get or Set the given [data-*] attribute(s) for the selected element (If a String is passed to the name param).\r\n\t *\r\n\t * _Gets the [data-*] attribute if only the name is given as a String._\r\n\t *\r\n\t * _Sets the [data-*] attribute if name and value is given as a String._\r\n\t *\r\n\t * _Sets the given [data-*] attributes if name is given as an Object (Key-Value Pair)._\r\n\t *\r\n\t * @param name {string|Object} Name of the [data-*] attribute or a Key-Value pair Object.\r\n\t * @param value {string|null = null} Value to set for the [data-*] attribute; Not required if an Object is passed as an argument to the name parameter.\r\n\t * @return {Fuxcel|string}\r\n\t */\r\n\tdataAttrib(name: string | object, value?: boolean | string | null): Fuxcel | string {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\tconst formattedName: string = this.#_formatDataAttrib(<string>name);\r\n\t\t\r\n\t\treturn <Fuxcel | string>(\r\n\t\t\t(name && !value && isString(name)) ?\r\n\t\t\t\t<string>selected[0].dataset[formattedName] :\r\n\t\t\t\t<Fuxcel>(isObject(name) ? this.#_setDataAttrib(name) : this.#_setDataAttrib(formattedName, <string>value))\r\n\t\t);\r\n\t}\r\n\t\r\n\t\r\n\tprop(name: object): Fuxcel;\r\n\tprop(name: string): string;\r\n\tprop(name: string, value: string | boolean): Fuxcel;\r\n\t/**\r\n\t * Get or Set the given property / properties for the selected element (If a String is passed to the name param).\r\n\t *\r\n\t * _Gets the property if only the name is given as a String._\r\n\t *\r\n\t * _Sets the property if name and value is given as a String or name is a String and value is a Boolean._\r\n\t *\r\n\t * _Sets the given property / properties if name is given as an Object (Key-Value Pair)._\r\n\t *\r\n\t * @param name {string|Object} Name of the property or a Key-Value pair Object.\r\n\t * @param value {boolean|string|null = null} Value to set for the property; Not required if an Object is passed as an argument to the name parameter.\r\n\t * @return {Fuxcel|string}\r\n\t */\r\n\tprop(name: string | object, value?: boolean | string | null): Fuxcel | string {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\t\r\n\t\treturn <Fuxcel | string>(\r\n\t\t\t(name && !value && isString(name)) ?\r\n\t\t\t\t<string>selected[0][<keyof HTMLElement>name] :\r\n\t\t\t\t<Fuxcel>(isObject(name) ? this.#_setProp(name) : this.#_setProp(name, <string>value))\r\n\t\t);\r\n\t}\r\n\t\r\n\tstyle(name: object): Fuxcel;\r\n\tstyle(name: string): string;\r\n\tstyle(name: string, value: string | boolean): Fuxcel;\r\n\t/**\r\n\t * Get or set the given CSS style(s) value of the selected element (If a String is passed to the name param).\r\n\t *\r\n\t * _Gets the given style if only the name is given as a String._\r\n\t *\r\n\t * _Sets the given style if name and value is given as a String._\r\n\t *\r\n\t * _Sets the given styles if name is given as a plain Object (Key-Value Pair)._\r\n\t *\r\n\t * @param name {string|Object} Name of the style or a Key-Value pair Object.\r\n\t * @param value {boolean|string|null = null} Value to set for the style; Not required if an Object is passed as an argument to the name parameter.\r\n\t * @return {Fuxcel|string}\r\n\t */\r\n\tstyle(name: string | object, value?: boolean | string | null): Fuxcel | string {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\t\r\n\t\treturn <Fuxcel | string>(\r\n\t\t\t(name && !value && isString(name)) ?\r\n\t\t\t\t<string>window.getComputedStyle(selected[0]).getPropertyValue(<string>name) :\r\n\t\t\t\t<Fuxcel>(isObject(name) ? this.#_setStyle(name) : this.#_setStyle(name, <string>value))\r\n\t\t);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns the attributes of the selected element as on Object.\r\n\t *\r\n\t * @return {Object} An object containing the attributes of the selected element.\r\n\t */\r\n\tlistAttrib(): object {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\tconst list: Record<string, string> = {};\r\n\t\t\r\n\t\tArray.from((<HTMLElement>selected[0]).attributes).forEach((attrib: Attr) => list[attrib.name] = attrib.value);\r\n\t\treturn list;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns the properties of the selected element as on Object.\r\n\t *\r\n\t * @return {Object} An object containing the properties of the selected element.\r\n\t */\r\n\tlistProp(): object {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\tconst list: Record<string, string> = {};\r\n\t\tObject.keys(<HTMLElement>selected[0]).filter(prop => Number.isNaN(parseInt(prop) && (<any>selected[0])[prop])).forEach(prop => list[prop] = (<any>selected[0])[prop]);\r\n\t\treturn list;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Removes the given [data-*] attribute(s) from the selected element.\r\n\t *\r\n\t * @param name {string[]} Comma separated strings of [data-*] attribute(s) to remove.\r\n\t * @return {Fuxcel} Fuxcel Object of the selected element\r\n\t */\r\n\tremoveAttrib(...name: string[]): Fuxcel {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\tselected.length && name.length && selected.forEach((element: HTMLElement) => name.forEach(attr => element.removeAttribute(attr)));\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Removes the given [data-*] attribute(s) from the selected element.\r\n\t *\r\n\t * @param name {string[]} Comma separated strings of [data-*] attribute(s) to remove.\r\n\t * @return {Fuxcel} Fuxcel Object of the selected element\r\n\t */\r\n\tremoveDataAttrib(...name: string[]): Fuxcel {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\tselected.length && name.length && selected.forEach((element: HTMLElement) => name.forEach(value => {\r\n\t\t\tconst dataAttr = this.#_formatDataAttrib(value);\r\n\t\t\tdelete element.dataset[dataAttr];\r\n\t\t}));\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Removes the given property / properties from the selected element.\r\n\t *\r\n\t * @param name {string[]} Comma separated strings of property / properties to remove.\r\n\t * @return {Fuxcel} Fuxcel Object of the selected element\r\n\t */\r\n\tremoveProp(...name: string[]): Fuxcel {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\tselected.length && name.length && selected.forEach((element: HTMLElement) => name.forEach(prop => (<any>element)[prop] = null));\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns the direct descendants (Children) of the selected element.\r\n\t *\r\n\t * _Returns the child that matches the selector if the selector parameter is passed._\r\n\t *\r\n\t * @param selector {Selector} Selectable string.\r\n\t * @return {Fuxcel} Fuxcel Object of the selected child(ren)\r\n\t */\r\n\tchildren(selector: Selector = null): Fuxcel {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\tconst children: IterableElement = <HTMLElement[]>[];\r\n\t\t\r\n\t\t(<HTMLElement[]>(Array.from(selected[0].children))).forEach((child: HTMLElement) => {\r\n\t\t\tif (isString(selector)) {\r\n\t\t\t\tif (fx(child).matchSelector(selector))\r\n\t\t\t\t\tchildren.push(child);\r\n\t\t\t} else\r\n\t\t\t\tchildren.push(child);\r\n\t\t});\r\n\t\treturn fx(children).#_setPrev(this);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Returns all the descendants of the selected element.\r\n\t *\r\n\t * _Returns the descendant that matches the selector if the selector parameter is passed._\r\n\t *\r\n\t * @param selector {Selector} Selectable string.\r\n\t * @return {Fuxcel} Fuxcel Object of the selected descendant(s)\r\n\t */\r\n\tdescendants(selector: Selector = null): Fuxcel {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\tconst descendants: HTMLElement[] = [];\r\n\t\t\r\n\t\t(<HTMLElement[]>fx('*', selected[0]).toArray).forEach((descendant: HTMLElement) => {\r\n\t\t\tif (isString(selector)) {\r\n\t\t\t\tif (fx(descendant).matchSelector(selector))\r\n\t\t\t\t\tdescendants.push(descendant);\r\n\t\t\t} else\r\n\t\t\t\tdescendants.push(descendant);\r\n\t\t});\r\n\t\treturn fx(descendants).#_setPrev(this);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns the parents of the selected element.\r\n\t *\r\n\t * _Returns the parent that matches the selector if the selector parameter is passed._\r\n\t *\r\n\t * @param selector {Selector} Selectable string.\r\n\t * @return {Fuxcel} Fuxcel Object of the selected parent(s)\r\n\t */\r\n\tparents(selector: Selector = null): Fuxcel {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\tconst parents: HTMLElement[] = [];\r\n\t\tlet parentNode = selected[0].parentNode;\r\n\t\t\r\n\t\twhile (parentNode) {\r\n\t\t\tif (isString(selector)) {\r\n\t\t\t\tif (parentNode.constructor.name.toLowerCase().includes('element')) {\r\n\t\t\t\t\tif (fx(parentNode).matchSelector(selector)) {\r\n\t\t\t\t\t\tparents.push(<HTMLElement>parentNode);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else\r\n\t\t\t\t\tbreak;\r\n\t\t\t} else {\r\n\t\t\t\tif (parentNode !== selected[0])\r\n\t\t\t\t\tparents.push(<HTMLElement>parentNode);\r\n\t\t\t}\r\n\t\t\tparentNode = parentNode.parentNode;\r\n\t\t}\r\n\t\treturn fx(parents).#_setPrev(this);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns the previous siblings of the selected element.\r\n\t *\r\n\t * _Returns the previous sibling that matches the selector if the selector parameter is passed._\r\n\t *\r\n\t * @param selector {Selector} Selectable string.\r\n\t * @return {Fuxcel} Fuxcel Object of the selected previous sibling(s)\r\n\t */\r\n\tprevSiblings(selector: Selector = null): Fuxcel {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\tconst prevSiblings: HTMLElement[] = [];\r\n\t\tlet prevElemSibling = selected[0].previousElementSibling;\r\n\t\t\r\n\t\twhile (prevElemSibling) {\r\n\t\t\tif (isString(selector)) {\r\n\t\t\t\tif (fx(prevElemSibling).matchSelector(selector)) {\r\n\t\t\t\t\tprevSiblings.push(<HTMLElement>prevElemSibling);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (prevElemSibling !== selected[0])\r\n\t\t\t\t\tprevSiblings.push(<HTMLElement>prevElemSibling);\r\n\t\t\t}\r\n\t\t\tprevElemSibling = prevElemSibling.previousElementSibling;\r\n\t\t}\r\n\t\treturn fx(prevSiblings).#_setPrev(this);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns the direct descendants (Children) of the selected element.\r\n\t *\r\n\t * _Returns the descendant that matches the selector if the selector parameter is passed._\r\n\t *\r\n\t * @param selector {Selector} Selectable string.\r\n\t * @return {Fuxcel} Fuxcel Object of the selected sibling(s)\r\n\t */\r\n\tsiblings(selector: Selector = null): Fuxcel {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\tconst siblings: HTMLElement[] = [];\r\n\t\t\r\n\t\tArray.from(<ArrayLike<any>>selected[0].parentNode?.children).forEach((sibling: HTMLElement) => {\r\n\t\t\tif (isString(selector)) {\r\n\t\t\t\tif (fx(sibling).matchSelector(selector) && sibling !== selected[0])\r\n\t\t\t\t\tsiblings.push(sibling)\r\n\t\t\t} else {\r\n\t\t\t\tif (sibling !== selected[0])\r\n\t\t\t\t\tsiblings.push(sibling)\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn fx(siblings).#_setPrev(this);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Disables or enables the selected element(s).\r\n\t *\r\n\t * @param disabled {boolean} Switch between disabling and enabling the selected element(s).\r\n\t * @return {Fuxcel} Fuxcel Object of the selected element.\r\n\t */\r\n\tdisable(disabled: boolean = true): Fuxcel {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\t\r\n\t\tselected.forEach((element: HTMLElement) => {\r\n\t\t\tconst tagName = element.tagName?.toLowerCase();\r\n\t\t\tconst selectedElement = fx(element);\r\n\t\t\t\r\n\t\t\tif (tagName === 'a')\r\n\t\t\t\tdisabled ? selectedElement.putClass('disabled') : selectedElement.removeClass('disabled');\r\n\t\t\telse\r\n\t\t\t\tdisabled ? selectedElement.prop({disabled: true}) : selectedElement.removeProp('disabled');\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t *\r\n\t * @param uri {string|null=null}=''} Request URL.\r\n\t * @param method {('get'|'post'|'put'|'patch'|'delete'|null)} Form Request method.\r\n\t * @param data {object|null=null} Additional form request data.\r\n\t * @param dataType {('html'|'json'|'jsonp'|'script'|'text'|'xml'|null)} Expected return data type.\r\n\t * @param headers {Object|Headers} Additional Headers to be sent along the request.\r\n\t * @param beforeSend {Function|null = null} Before request is sent.\r\n\t * @param timeout\r\n\t * @param handleError\r\n\t */\r\n\thandleFormSubmit({uri = '', method = 'get', data = null, dataType = 'json', headers = null, beforeSend = null, timeout = 10000, handleError = false}: FXFormSubmitType = {}): Promise<any> {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\tlet response: any;\r\n\t\t\r\n\t\treturn new Promise((resolve, reject) =>\r\n\t\t\tselected.forEach((element: HTMLElement) => {\r\n\t\t\t\tif (fx(element).isElement('form')) {\r\n\t\t\t\t\tconst form = fx(element).formValidator;\r\n\t\t\t\t\tconst formData = new FormData(<HTMLFormElement>element);\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\tdata && Object.keys(data).length && Object.keys(data).forEach(key => Array.isArray(data[key]) ? formData.append(<any>data[key][0], data[key][1], data[key][2]) : formData.append(key, data[key]));\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (!uri?.length && form.attrib('action'))\r\n\t\t\t\t\t\turi = form.attrib('action');\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (form.attrib('method'))\r\n\t\t\t\t\t\tmethod = <'get' | 'post' | 'put' | 'patch' | 'delete'>form.attrib('method');\r\n\t\t\t\t\t\r\n\t\t\t\t\t!form.errorCount ? typeof fx.fetch === 'function' && fx.fetch({\r\n\t\t\t\t\t\turi: <string>uri,\r\n\t\t\t\t\t\tmethod: method,\r\n\t\t\t\t\t\theaders: headers,\r\n\t\t\t\t\t\tdata: formData,\r\n\t\t\t\t\t\tdataType: dataType,\r\n\t\t\t\t\t\ttimeout: timeout,\r\n\t\t\t\t\t\tbeforeSend() {\r\n\t\t\t\t\t\t\tisFunction(beforeSend) && (<Function>beforeSend)(form);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tonError(err: any, status: number) {\r\n\t\t\t\t\t\t\treject({response: err, status: status, form: form});\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tonComplete(xhr: ResponseData, status: number) {\r\n\t\t\t\t\t\t\tif (dataType === 'json') {\r\n\t\t\t\t\t\t\t\tresponse = xhr.responseJSON\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif ((status > 199 && status < 300) || status === 308) {\r\n\t\t\t\t\t\t\t\t\tresolve({JSON: response, text: xhr.responseText, status: status, form: form});\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tif (status === 401)\r\n\t\t\t\t\t\t\t\t\t\tfx.modal({\r\n\t\t\t\t\t\t\t\t\t\t\ttype: 'error',\r\n\t\t\t\t\t\t\t\t\t\t\tcontent: response.message ?? 'Unauthorized Request',\r\n\t\t\t\t\t\t\t\t\t\t\tcancelButtonText: 'Cancel',\r\n\t\t\t\t\t\t\t\t\t\t\tonCancel: () => form.toggleFormSubmitButtonState(false)\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\tif (status === 419)\r\n\t\t\t\t\t\t\t\t\t\tsetTimeout(() => response.redirect ? (location.href = response.redirect) : location.reload(), 2000);\r\n\t\t\t\t\t\t\t\t\telse if (status === 422 || status === 500) {\r\n\t\t\t\t\t\t\t\t\t\tif (handleError && status === 422)\r\n\t\t\t\t\t\t\t\t\t\t\tresponse.errors ?\r\n\t\t\t\t\t\t\t\t\t\t\t\tresponse.message ? form.renderValidationErrors(response.errors, response.message) : form.renderValidationErrors(response.errors) :\r\n\t\t\t\t\t\t\t\t\t\t\t\tresponse.message && form.renderValidationErrors({}, response.message);\r\n\t\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\t\tresolve({JSON: response, status: status, form: form});\r\n\t\t\t\t\t\t\t\t\t\tform.toggleFormSubmitButtonState(false);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tconsole.error('Server Failure', xhr);\r\n\t\t\t\t\t\t\t\t\t\treject({response: xhr, status: status, form: form});\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tif ((status > 199 && status < 300) || status === 308)\r\n\t\t\t\t\t\t\t\t\tresolve({text: xhr.responseText, form: form});\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\treject({response: xhr, status: status, form: form});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}) : form.renderValidationErrors(form.errorBag);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check if the selected element has a scrollbar in the given direction.\r\n\t *\r\n\t * @param direction {('vertical'|'horizontal'|null)} Specific direction to check _[horizontal or vertical]_.\r\n\t * @return {boolean} true if the selected element has a scrollbar in the specified direction; false otherwise.\r\n\t */\r\n\thasScrollBar(direction: (Direction | null) = 'vertical'): boolean {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\tlet scrollType: { vertical: string, horizontal: string } = {vertical: 'scrollHeight', horizontal: 'scrollWidth'},\r\n\t\t\tclientType: { vertical: string, horizontal: string } = {vertical: 'clientHeight', horizontal: 'clientWidth'};\r\n\t\t\r\n\t\tif (isString(direction) && scrollType[<Direction>direction])\r\n\t\t\treturn <Number>(selected[0][<keyof HTMLElement>scrollType[<Direction>direction]]) > <Number>(selected[0][<keyof HTMLElement>clientType[<Direction>direction]])\r\n\t\tthrow (`Function \\`hasScrollBar()\\` expects 1 argument. 0 given.`);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Inserts the given HTML string to the given position of the selected element.\r\n\t *\r\n\t * _Inserts the HTML string as inner HTML if no position is given._\r\n\t *\r\n\t * @param value {string} HTML string to insert\r\n\t * @param position {('affix'|'prefix'|'postfix'|'suffix'|null)} Position to place given HTML string.\r\n\t * @return {Fuxcel} Fuxcel Object of the selected element\r\n\t */\r\n\tinsertHTML(value: string, position: (Position | null) = null): Fuxcel {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\tconst positions: { affix: string, prefix: string, postfix: string, suffix: string } = {\r\n\t\t\taffix: 'beforebegin',\r\n\t\t\tprefix: 'afterbegin',\r\n\t\t\tpostfix: 'afterend',\r\n\t\t\tsuffix: 'beforeend'\r\n\t\t}\r\n\t\t\r\n\t\tif (isString(position) && !positions[<Position>position])\r\n\t\t\tthrow (`Invalid position option given. Valid position options:\\n'affix',\\n'prefix',\\n'postfix',\\n'suffix'`);\r\n\t\t\r\n\t\tselected.forEach((element: HTMLElement) => isString(position) ? element.insertAdjacentHTML(<InsertPosition>positions[<Position>position], value) : element.innerHTML = value);\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Checks if the selected element matches the given tag name.\r\n\t *\r\n\t * @param tagName {string|HTMLElementTagNameMap} HTML tag name to check for.\r\n\t * @return {boolean} true if the selected elements' tag name matches the given tag name; false otherwise.\r\n\t */\r\n\tisElement(tagName: string | HTMLElementTagNameMap): boolean {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\tif (isString(tagName))\r\n\t\t\treturn selected[0].tagName.toLowerCase() === tagName.toString().toLowerCase();\r\n\t\tthrow (`Function \\`matchSelector()\\` expects 1 string argument. 0 given`);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Checks to see if the selected element would be selected by the provided selectorString _-- in other words --_ checks if the selected element \"is\" the selector.\r\n\t *\r\n\t * @param selector {Selector} Selector to check element against.\r\n\t * @return {boolean} true if the selected element would be selected; false otherwise.\r\n\t */\r\n\tmatchSelector(selector: Selector): boolean {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\tif (isString(selector))\r\n\t\t\treturn (selected[0].matches).call(selected[0], <string>selector);\r\n\t\tthrow (`Function \\`matchSelector()\\` expects 1 argument. 0 given`);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Remove Event Listener(s) from the selected element.\r\n\t *\r\n\t * _Removes the given event(s) from the selected element if the event parameter is given._\r\n\t *\r\n\t * _Removes all previous Event Listeners from the selected element._\r\n\t *\r\n\t * @param events {string[]} Particular event to remove.\r\n\t * @return {Fuxcel} Fuxcel Object of the selected element.\r\n\t */\r\n\toff(...events: string[]): Fuxcel {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\t\r\n\t\tselected.forEach((element: HTMLElementWithListenerArray) => {\r\n\t\t\t(element.listeners) && element.listeners.forEach((listener: { event: string, listener: any, option: any }, index) => {\r\n\t\t\t\tif (events.length) {\r\n\t\t\t\t\tevents.forEach((event: string) => {\r\n\t\t\t\t\t\tif (listener.event.toLowerCase() === event?.toLowerCase()) {\r\n\t\t\t\t\t\t\telement.removeEventListener(listener.event, listener.listener, listener.option);\r\n\t\t\t\t\t\t\t(<[]>element.listeners).splice(index, 1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\telement.removeEventListener(listener.event, listener.listener, listener.option)\r\n\t\t\t\t\tdelete element.listeners;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Toggle the disabled state (property) of the selected element [a button preferably].\r\n\t *\r\n\t * @param isLoading {boolean} Determines the state of the button.\r\n\t */\r\n\ttoggleButtonLoadState(isLoading: boolean = true): void {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\tconst button = fx(selected[0]);\r\n\t\tconst loaderElement = fx(Fuxcel.buttonLoaderClass, button);\r\n\t\t\r\n\t\tif (isLoading) {\r\n\t\t\tif (!button.prop('disabled') || !button.attrib('disabled'))\r\n\t\t\t\tloaderElement.length ?\r\n\t\t\t\t\t(loaderElement.style('display') === 'none' ? loaderElement.fadein().then(() => button.disable()) : button.disable()) :\r\n\t\t\t\t\tbutton.disable();\r\n\t\t} else\r\n\t\t\tloaderElement.length ?\r\n\t\t\t\t(loaderElement.style('display') !== 'none' ? loaderElement.fadeout().then(() => button.disable(false)) : button.disable(false)) :\r\n\t\t\t\tbutton.disable(false);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Toggles the submit button state of the selected form.\r\n\t *\r\n\t * @param isLoading {boolean} Determines the state of the button.\r\n\t */\r\n\ttoggleFormSubmitButtonState(isLoading: boolean = true): void {\r\n\t\tconst selected: IterableElement = <HTMLFormElement[]>this.toArray;\r\n\t\t\r\n\t\tif (this.isElement('form')) {\r\n\t\t\tconst submitButton = fx('button[type=\"submit\"]', <SingleElement>selected[0]).length ?\r\n\t\t\t\tfx('button[type=\"submit\"]', <SingleElement>selected[0]) :\r\n\t\t\t\tfx(`button[form=\"${(<HTMLFormElement>(<SingleElement>selected[0])).id}\"]`);\r\n\t\t\tsubmitButton.toggleButtonLoadState(isLoading);\r\n\t\t} else\r\n\t\t\tconsole.warn('Non form element given.');\r\n\t}\r\n\t\r\n\t/**\r\n\t * Trigger a new event on the selected element(s).\r\n\t *\r\n\t * @param event {string}\r\n\t * @param type {('mouse'|'keyboard'|null)}\r\n\t * @return {Fuxcel}\r\n\t */\r\n\ttrigger(event: string, type: ('mouse' | 'keyboard' | null) = null): Fuxcel {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\tconst matchEvent = {\r\n\t\t\tmouse: MouseEvent,\r\n\t\t\tkeyboard: KeyboardEvent,\r\n\t\t}\r\n\t\tconst InitEvent = !type ? Event : matchEvent[(<('mouse' | 'keyboard')>type.toLowerCase())];\r\n\t\t\r\n\t\tconst newEvent = new InitEvent(event, {\r\n\t\t\tbubbles: true,\r\n\t\t\tcancelable: true\r\n\t\t});\r\n\t\tselected.forEach((element: HTMLElement) => element.dispatchEvent(newEvent));\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add given Event Listener to the selected element.\r\n\t *\r\n\t * @param events {string} Event\r\n\t * @param listener {((e: EventCounts)=>any)}\r\n\t * @param option {boolean}\r\n\t */\r\n\tupon(events: string, listener: ((e: Event) => any), option?: boolean): Fuxcel\r\n\tupon(events: string[], listener: ((e: Event) => any), option?: boolean): Fuxcel\r\n\tupon(events: EventListenerOrEventListenerObject | object, listener?: boolean): Fuxcel\r\n\t/**\r\n\t * Add Event Listener(s) to the selected element.\r\n\t *\r\n\t * _Add a single Event Listener to the element if the events parameter is given as a string._\r\n\t *\r\n\t * _Add multiple Event Listeners by passing them as a Key-Value pair._\r\n\t *\r\n\t * _If the events parameter is a string; the listener parameter is required as a function to handle the event with an optional third parameter of boolean._\r\n\t *\r\n\t * _If the events parameter is a Key-Value pair; then the second parameter is required as a boolean._\r\n\t *\r\n\t * @param events {string} Event as a string.\r\n\t * @param listener {((e: CustomEvent | KeyboardEvent | MouseEvent | TouchEvent | Event) => any)} Listener function to handle given event.\r\n\t * @param {boolean} [option] Optional boolean parameter to set CAPTURING_PHASE of the event listener to either true or false.\r\n\t * @return {Fuxcel} Fuxcel Object of the selected element\r\n\t *\r\n\t * @param events {Object} Events passed as a Key-Value pair with each event as the key and the listener functions as the values\r\n\t * @param  {boolean} [listener] Optional boolean parameter to set CAPTURING_PHASE of the event listener to either true or false.\r\n\t * @return {Fuxcel} Fuxcel Object of the selected element\r\n\t */\r\n\tupon(events: EventListenerOrEventListenerObject | string | string[] | object, listener?: ((e: Event) => any) | boolean, option: boolean = true): Fuxcel {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\t\r\n\t\tif (isObject(events) && listener === undefined)\r\n\t\t\tlistener = true;\r\n\t\t\r\n\t\tselected.forEach((element: HTMLElementWithListenerArray) => {\r\n\t\t\tif (!element.listeners)\r\n\t\t\t\telement.listeners = [];\r\n\t\t\t\r\n\t\t\tif (Array.isArray(events) && events.length)\r\n\t\t\t\tevents.forEach((event: keyof HTMLElementEventMap) => {\r\n\t\t\t\t\telement.addEventListener(event, <any>listener, option);\r\n\t\t\t\t\t(<HTMLListenerArray>element.listeners).push({element: element, listener: <any>listener, event: event, option: option});\r\n\t\t\t\t});\r\n\t\t\telse {\r\n\t\t\t\tif (isObject(events))\r\n\t\t\t\t\tObject.keys(events).forEach((event: string) => {\r\n\t\t\t\t\t\telement.addEventListener(<keyof HTMLElementEventMap>event, (<any>events)[event], <any>listener);\r\n\t\t\t\t\t\t(<HTMLListenerArray>element.listeners).push({element: element, listener: events[<keyof object>event], event: event, option: <boolean>listener});\r\n\t\t\t\t\t});\r\n\t\t\t\telse {\r\n\t\t\t\t\tconst event: string = <string>events;\r\n\t\t\t\t\telement.addEventListener(event, <((e: Event) => any)>listener, option);\r\n\t\t\t\t\telement.listeners.push({element: element, listener: <any>listener, event: event, option: option});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\tvalue(): string | null;\r\n\tvalue(value: string): Fuxcel;\r\n\t/**\r\n\t * Get or set the value of the selected element.\r\n\t *\r\n\t * @param value {string|null=null} Value to set for the given element (If available).\r\n\t * @return {Fuxcel|string|null} The value of the selected element if no parameter is passed for value; Fuxcel object of the selected element otherwise.\r\n\t */\r\n\tvalue(value: StringOrNull = null): Fuxcel | string | null {\r\n\t\tconst selected: IterableElement = <HTMLFormElement[]>this.toArray;\r\n\t\t\r\n\t\tif (typeof value === 'string') {\r\n\t\t\tselected.forEach((element: HTMLElement) => (<HTMLFormElement>element).value = value);\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\treturn (<HTMLFormElement>selected[0]).value;\r\n\t}\r\n}\r\n\r\nclass FuxcelValidator extends Fuxcel implements FuxcelValidatorInterface {\r\n\t#_fxValidatorConfig: ValidatorConfigObject = FuxcelValidator.defaultValidatorConfig;\r\n\t\r\n\tstatic #_defaultConfig: ValidatorConfigObject = {\r\n\t\tregExp: {\r\n\t\t\tcardCVV: /[0-9]{3,4}$/gi,\r\n\t\t\tcardNumber: /^[0-9]+$/gi,\r\n\t\t\temail: /^(([a-zA-Z])+([.-]?\\w+))*@\\w+([.-]?)*(\\.\\w{2,3})$/gi,\r\n\t\t\tname: /^([a-zA-Z]{2,255})(\\s[a-zA-Z]{2,255}){1,2}$/gi,\r\n\t\t\tphone: /^(\\+\\d{1,3}?\\s)(\\(\\d{3}\\)\\s)?(\\d+\\s)*(\\d{2,3}-?\\d+)+$/g,\r\n\t\t\tusername: /^[a-zA-Z]+(_?[a-zA-Z]){2,255}$/gi,\r\n\t\t\tpassword: /[0-9A-Za-z]{8,32}/gi,\r\n\t\t},\r\n\t\tconfig: {\r\n\t\t\tcapslockAlert: true,\r\n\t\t\tshowIcons: true,\r\n\t\t\tshowPassword: true,\r\n\t\t\tvalidateCard: false,\r\n\t\t\tvalidateEmail: true,\r\n\t\t\tvalidateName: false,\r\n\t\t\tvalidatePassword: true,\r\n\t\t\tvalidatePhone: false,\r\n\t\t\tvalidateUsername: false,\r\n\t\t\tnativeValidation: false,\r\n\t\t\tuseDefaultStyling: false,\r\n\t\t\tpasswordConfirmId: 'password_confirmation',\r\n\t\t\tpasswordId: 'password',\r\n\t\t\tinitWrapper: '.form-group',\r\n\t\t},\r\n\t\tstepForm: {\r\n\t\t\tuse: false,\r\n\t\t\tplugin: false,\r\n\t\t\tconfig: {\r\n\t\t\t\tstep: '.fx-step',\r\n\t\t\t\tslides: false,\r\n\t\t\t\tswitch: '[data-step]',\r\n\t\t\t},\r\n\t\t},\r\n\t\ttexts: {\r\n\t\t\tcapslock: 'Capslock active',\r\n\t\t\temailFormat: null,\r\n\t\t\tnameFormat: null,\r\n\t\t\tpasswordFormat: null,\r\n\t\t\tphoneFormat: null,\r\n\t\t\tusernameFormat: null,\r\n\t\t},\r\n\t}\r\n\t\r\n\tstatic #_initSteps: object = {};\r\n\tstatic #_stepsClass: string = '.fx-step';\r\n\tstatic #_validatorErrorBag: object = {};\r\n\tstatic #_validatorErrorCount: object = {};\r\n\t\r\n\tconstructor(selector: string | IterableElement | any, context?: string | IterableElement | any) {\r\n\t\tsuper(selector, context);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Toggle given icons with a fadeout and fadein animation.\r\n\t *\r\n\t * @param oldIcon {Selector|IterableElement} Old Icon selector\r\n\t * @param newIcon {Selector|IterableElement} New Icon selector\r\n\t * @private\r\n\t * @return void\r\n\t */\r\n\tstatic #_toggleValidationIcons(oldIcon: string, newIcon: string): void {\r\n\t\tconst _oldIcon: Fuxcel = fx(oldIcon);\r\n\t\tconst _newIcon: Fuxcel = fx(newIcon);\r\n\t\t\r\n\t\tif (_oldIcon.length && _newIcon.length) {\r\n\t\t\tif (_oldIcon.style('display') !== 'none')\r\n\t\t\t\t_oldIcon.style({animation: 'fadeOut 500ms linear', display: 'none'});\r\n\t\t\t_newIcon.style({display: 'inline-block', animation: 'fadeIn 500ms linear'});\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Perform necessary action pre-validation.\r\n\t *\r\n\t * @param forms {HTMLElement[]} array of HTML Form Element(s).\r\n\t * @private\r\n\t * @return {FuxcelValidator} Fuxcel Validator Object of the forms.\r\n\t */\r\n\t#_initValidateForms(forms: HTMLFormElement[]): FuxcelValidator {\r\n\t\tforms.forEach((form: HTMLFormElement, index) => {\r\n\t\t\tconst that = this;\r\n\t\t\tconst configObject = this.validatorConfig;\r\n\t\t\tconst _currentForm = fx(form).formValidator;\r\n\t\t\t\r\n\t\t\tif (!_currentForm.attrib('id'))\r\n\t\t\t\t_currentForm.attrib({id: `current-form-${index}`});\r\n\t\t\t\r\n\t\t\tlet formId = _currentForm.attrib('id'),\r\n\t\t\t\tformGroups = fx(`#${formId} .form-group`).formValidator;\r\n\t\t\t\r\n\t\t\t// @ts-ignore\r\n\t\t\tFuxcelValidator.#_validatorErrorBag[formId] = {};\r\n\t\t\t// @ts-ignore\r\n\t\t\tFuxcelValidator.#_validatorErrorCount[formId] = 0;\r\n\t\t\t\r\n\t\t\tconfigObject.config?.nativeValidation ? _currentForm.prop({noValidate: false}) : _currentForm.prop({noValidate: true});\r\n\t\t\t\r\n\t\t\tif (formGroups.length)\r\n\t\t\t\t(<HTMLElement[]>formGroups.toArray).forEach((formGroup: HTMLElement) => {\r\n\t\t\t\t\tconst _fieldElement = fx('.form-field', formGroup).formValidator;\r\n\t\t\t\t\tconst _labelElement = fx('label', formGroup).formValidator;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (_fieldElement.length && _labelElement.length) {\r\n\t\t\t\t\t\tif (_fieldElement.length < 2 && _labelElement.length < 2) {\r\n\t\t\t\t\t\t\tif (!_fieldElement.attrib('id'))\r\n\t\t\t\t\t\t\t\tif (_fieldElement.attrib('name'))\r\n\t\t\t\t\t\t\t\t\t_fieldElement.attrib({id: _fieldElement.attrib('name').toString().replaceAll('-', '_')});\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\t\t\t\tconsole.error(`${_fieldElement[0].tagName} element has no \\`id\\` or \\`name\\` attribute`, _fieldElement);\r\n\t\t\t\t\t\t\t\t\tthrow (`Field element does not have an \\`id\\` or \\`name\\` attribute`);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tconst fieldElementId: string = _fieldElement.attrib('id');\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (_fieldElement.prop('tagName').toString().toLowerCase() === 'input' && !_fieldElement.attrib('placeholder'))\r\n\t\t\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\t\t\t_fieldElement.attrib({placeholder: _fieldElement.attrib('name').toTitleCase()});\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (!_labelElement.attrib('for'))\r\n\t\t\t\t\t\t\t\t_labelElement.attrib('for', fieldElementId);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\t\tconst expectedFieldElement: HTMLElement = _fieldElement[0];\r\n\t\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\t\tconst expectedLabelElement: HTMLElement = _labelElement[0];\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tformGroup = this.#_placeElements(\r\n\t\t\t\t\t\t\t\tthat,\r\n\t\t\t\t\t\t\t\tform,\r\n\t\t\t\t\t\t\t\tformGroup,\r\n\t\t\t\t\t\t\t\texpectedFieldElement,\r\n\t\t\t\t\t\t\t\texpectedLabelElement\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tthis.#_validate(that, formGroup);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\telse\r\n\t\t\t\tconsole.error(`init-wrapper element not found in form: #${formId}`);\r\n\t\t});\r\n\t\treturn this.#_resetFuxcelObject(fx(forms));\r\n\t}\r\n\t\r\n\t/**\r\n\t * Initialize validation on selected step form(s).\r\n\t *\r\n\t * @param forms {HTMLElement[]} array of HTML Form Element(s).\r\n\t * @return {FuxcelSteps} Fuxcel Steps Object of the forms.\r\n\t */\r\n\t#_initValidateStepForms(forms: HTMLFormElement[]): FuxcelSteps {\r\n\t\tforms.forEach((form: HTMLFormElement, index: number) => {\r\n\t\t\tconst configObject = this.validatorConfig;\r\n\t\t\tconst _currentForm = fx(form).formValidator;\r\n\t\t\t\r\n\t\t\tif (!_currentForm.attrib('id'))\r\n\t\t\t\t_currentForm.attrib({id: `current-form-${index}`});\r\n\t\t\t\r\n\t\t\tlet formId = _currentForm.attrib('id'),\r\n\t\t\t\tformSteps = fx(`#${formId} ${FuxcelValidator.stepsClass}`).formValidator;\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif (formSteps.length) {\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tFuxcelValidator.#_initSteps[index] = formId;\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tFuxcelValidator.#_validatorErrorBag[formId] = {};\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tFuxcelValidator.#_validatorErrorCount[formId] = {};\r\n\t\t\t\t\r\n\t\t\t\tconfigObject.config?.nativeValidation ? _currentForm.prop({noValidate: false}) : _currentForm.prop({noValidate: true});\r\n\t\t\t\t\r\n\t\t\t\t(<HTMLElement[]>formSteps.toArray).forEach((step: HTMLElement, index: number) => {\r\n\t\t\t\t\tstep.dataset.fxStep = `${index + 1}`\r\n\t\t\t\t\tconst stepIndex = parseInt(<string>step.dataset.fxStep);\r\n\t\t\t\t\tconst formGroups = fx(`.form-group`, step).formValidator;\r\n\t\t\t\t\t\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\tFuxcelValidator.#_validatorErrorBag[formId][stepIndex] = {};\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\tFuxcelValidator.#_validatorErrorCount[formId][stepIndex] = 0;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (formGroups.length) {\r\n\t\t\t\t\t\tconst inputElement = 'input.form-field', selectElement = 'select.form-field', textAreaElement = 'textarea.form-field';\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t(<HTMLElement[]>formGroups.toArray).forEach((formGroup: HTMLElement) => {\r\n\t\t\t\t\t\t\tconst _fieldElement = fx(`${inputElement}, ${selectElement}, ${textAreaElement}`, formGroup).formValidator;\r\n\t\t\t\t\t\t\tconst _labelElement = fx('label', formGroup).formValidator;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (_fieldElement.length && _labelElement.length) {\r\n\t\t\t\t\t\t\t\tif (_fieldElement.length < 2 && _labelElement.length < 2) {\r\n\t\t\t\t\t\t\t\t\tif (!_fieldElement.attrib('id'))\r\n\t\t\t\t\t\t\t\t\t\tif (_fieldElement.attrib('name'))\r\n\t\t\t\t\t\t\t\t\t\t\t_fieldElement.attrib({id: _fieldElement.attrib('name').toString().replaceAll('-', '_')});\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\t\t\t\t\t\tconsole.error(`${_fieldElement[0].tagName} element has no \\`id\\` or \\`name\\` attribute`, _fieldElement);\r\n\t\t\t\t\t\t\t\t\t\t\tthrow (`Field element does not have an \\`id\\` or \\`name\\` attribute`);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tconst fieldElementId: string = _fieldElement.attrib('id');\r\n\t\t\t\t\t\t\t\t\tif (_fieldElement.prop('tagName').toString().toLowerCase() === 'input' && !_fieldElement.attrib('placeholder'))\r\n\t\t\t\t\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\t\t\t\t\t_fieldElement.attrib({placeholder: _fieldElement.attrib('name').toTitleCase()});\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (!_labelElement.attrib('for'))\r\n\t\t\t\t\t\t\t\t\t\t_labelElement.attrib('for', fieldElementId);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\t\t\t\tconst expectedFieldElement: HTMLElement = _fieldElement[0];\r\n\t\t\t\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\t\t\t\tconst expectedLabelElement: HTMLElement = _labelElement[0];\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tformGroup = this.#_placeElements(\r\n\t\t\t\t\t\t\t\t\t\tthis,\r\n\t\t\t\t\t\t\t\t\t\tform,\r\n\t\t\t\t\t\t\t\t\t\tformGroup,\r\n\t\t\t\t\t\t\t\t\t\texpectedFieldElement,\r\n\t\t\t\t\t\t\t\t\t\texpectedLabelElement\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tthis.#_validate(\r\n\t\t\t\t\t\t\t\t\t\tthis,\r\n\t\t\t\t\t\t\t\t\t\tformGroup,\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t\t// @ts-ignore\r\n\t\tObject.keys(this).forEach(key => FuxcelSteps.currentlySelected[key] = this[key]);\r\n\t\treturn new FuxcelSteps(this);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add or remove validation errors from the Validation Error Bag and also update the Error Count for the current form via its selected form field element.\r\n\t *\r\n\t * _If a string value is passed to the MessageOrRemove parameter, the message is added to the validation error bag for selected element._\r\n\t *\r\n\t * _If a boolean value is passed to the MessageOrRemove parameter, then previous error is removed from the validation error bag for the selected element._\r\n\t *\r\n\t * @param MessageOrRemove {string|boolean} String or boolean value indicating whether to add or remove error respectively.\r\n\t * @private\r\n\t * @return {void}\r\n\t */\r\n\t#_manipulateErrorBag(MessageOrRemove: string | boolean): void {\r\n\t\tconst fieldAttribs = this.fieldAttributes;\r\n\t\t\r\n\t\tif (isBool(MessageOrRemove) && MessageOrRemove)\r\n\t\t\tObject.keys(FuxcelValidator.#_validatorErrorBag).length && (Object.values(FuxcelValidator.#_initSteps).filter(value => fieldAttribs.formId === value).length ?\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\t(Object.keys(FuxcelValidator.#_validatorErrorBag[fieldAttribs.formId]).length && (delete FuxcelValidator.#_validatorErrorBag[fieldAttribs.formId][this.stepFromField][fieldAttribs.id])) :\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tdelete FuxcelValidator.#_validatorErrorBag[fieldAttribs.formId][fieldAttribs.id]);\r\n\t\telse {\r\n\t\t\tif (isString(MessageOrRemove))\r\n\t\t\t\tObject.keys(FuxcelValidator.#_validatorErrorBag).length && (Object.values(FuxcelValidator.#_initSteps).filter(value => fieldAttribs.formId === value).length ?\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t(Object.keys(FuxcelValidator.#_validatorErrorBag[fieldAttribs.formId]).length && (FuxcelValidator.#_validatorErrorBag[fieldAttribs.formId][this.stepFromField][fieldAttribs.id] = MessageOrRemove)) :\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\tFuxcelValidator.#_validatorErrorBag[fieldAttribs.formId][fieldAttribs.id] = MessageOrRemove);\r\n\t\t}\r\n\t\tthis.#_manipulateErrorCount();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Update the error count in the Validation Error Count Bag of the form by count the total number of errors in the Validation Error Bag for the current form.\r\n\t *\r\n\t * @private\r\n\t * @return {void}\r\n\t */\r\n\t#_manipulateErrorCount(): void {\r\n\t\tconst fieldAttribs = this.fieldAttributes;\r\n\t\t\r\n\t\tObject.keys(FuxcelValidator.#_validatorErrorCount).length && (Object.values(FuxcelValidator.#_initSteps).filter(value => fieldAttribs.formId === value).length ?\r\n\t\t\t// @ts-ignore\r\n\t\t\t(Object.keys(FuxcelValidator.#_validatorErrorCount[fieldAttribs.formId]).length && (FuxcelValidator.#_validatorErrorCount[fieldAttribs.formId][this.stepFromField] = Object.keys(FuxcelValidator.#_validatorErrorBag[fieldAttribs.formId][this.stepFromField]).length)) :\r\n\t\t\t// @ts-ignore\r\n\t\t\tFuxcelValidator.#_validatorErrorCount[fieldAttribs.formId] = Object.keys(FuxcelValidator.#_validatorErrorBag[fieldAttribs.formId]).length);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Place all necessary elements in their required position pre-validation.\r\n\t *\r\n\t * @param that {FuxcelValidator} Current Form Validator instance.\r\n\t * @param form {HTMLFormElement} Initialized form instance.\r\n\t * @param formGroup {HTMLElement} Selected Form group.\r\n\t * @param expectedFieldElement {HTMLElement} Expected field element in selected form group.\r\n\t * @param expectedLabelElement {HTMLElement} Expected label element in selected form group.\r\n\t * @private\r\n\t * @return {HTMLElement}\r\n\t */\r\n\t#_placeElements(that: FuxcelValidator, form: HTMLFormElement, formGroup: HTMLElement, expectedFieldElement: HTMLElement, expectedLabelElement: HTMLElement): HTMLElement {\r\n\t\tconst configObject: ValidatorConfigObject = that.validatorConfig;\r\n\t\tconst _fieldElement: Fuxcel = fx(expectedFieldElement);\r\n\t\t\r\n\t\tconst fieldGroupId: string = `${expectedFieldElement.id}_group`;\r\n\t\tconst validationText: HTMLDivElement = document.createElement('div');\r\n\t\t\r\n\t\tvalidationText.classList.add('validation-text');\r\n\t\tvalidationText.innerHTML = '<small>&nbsp;</small>';\r\n\t\t\r\n\t\tformGroup.setAttribute('id', fieldGroupId);\r\n\t\t\r\n\t\tif (configObject.config?.useDefaultStyling) {\r\n\t\t\tconst newInputGroup: HTMLDivElement = document.createElement('div');\r\n\t\t\tconst newFormGroupWrapper: HTMLDivElement = document.createElement('div');\r\n\t\t\tconst validationIcons: HTMLDivElement = document.createElement('div');\r\n\t\t\tconst togglePasswordIcons: HTMLDivElement = document.createElement('div');\r\n\t\t\tconst newInputGroupWrapper: HTMLDivElement = document.createElement('div');\r\n\t\t\tconst newFieldGroup: HTMLDivElement = document.createElement('div');\r\n\t\t\t\r\n\t\t\tnewFormGroupWrapper.classList.add('form-group-wrapper');\r\n\t\t\tnewInputGroup.classList.add('input-group');\r\n\t\t\t\r\n\t\t\tformGroup.classList.add('fx-default-style');\r\n\t\t\tnewInputGroupWrapper.classList.add('input-group-wrapper', 'fx-floating-label');\r\n\t\t\tnewFieldGroup.classList.add('field-group');\r\n\t\t\t\r\n\t\t\tif (configObject.config?.showIcons) {\r\n\t\t\t\tconst imageCheck: HTMLImageElement = new Image();\r\n\t\t\t\tconst imageClose: HTMLImageElement = new Image();\r\n\t\t\t\t\r\n\t\t\t\timageCheck.src = `${Fuxcel.path}/images/ok-24.svg`;\r\n\t\t\t\timageClose.src = `${Fuxcel.path}/images/cancel-24.svg`;\r\n\t\t\t\t\r\n\t\t\t\timageCheck.setAttribute('alt', '\u2705');\r\n\t\t\t\timageClose.setAttribute('alt', '\u274C');\r\n\t\t\t\timageCheck.setAttribute('width', '22px');\r\n\t\t\t\timageClose.setAttribute('width', '22px');\r\n\t\t\t\t\r\n\t\t\t\timageCheck.classList.add('fx-valid-icon');\r\n\t\t\t\timageClose.classList.add('fx-invalid-icon');\r\n\t\t\t\t\r\n\t\t\t\tvalidationIcons.classList.add('validation-icons');\r\n\t\t\t\tvalidationIcons.append(imageCheck, imageClose);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (configObject.config?.showPassword) {\r\n\t\t\t\tif (_fieldElement.attrib('type') && _fieldElement.attrib('type').toString().toLowerCase() === 'password') {\r\n\t\t\t\t\tconst showPassword: HTMLImageElement = new Image();\r\n\t\t\t\t\tconst hidePassword: HTMLImageElement = new Image();\r\n\t\t\t\t\t\r\n\t\t\t\t\tshowPassword.src = `${Fuxcel.path}/images/eye-24.png`;\r\n\t\t\t\t\thidePassword.src = `${Fuxcel.path}/images/invisible-24.png`;\r\n\t\t\t\t\t\r\n\t\t\t\t\tshowPassword.setAttribute('alt', '\uD83D\uDD12');\r\n\t\t\t\t\thidePassword.setAttribute('alt', '\uD83D\uDD13');\r\n\t\t\t\t\tshowPassword.setAttribute('width', '22px');\r\n\t\t\t\t\thidePassword.setAttribute('width', '22px');\r\n\t\t\t\t\t\r\n\t\t\t\t\tshowPassword.classList.add('fx-show-password-icon');\r\n\t\t\t\t\thidePassword.classList.add('fx-hide-password-icon');\r\n\t\t\t\t\t\r\n\t\t\t\t\ttogglePasswordIcons.classList.add('toggle-password-icons');\r\n\t\t\t\t\ttogglePasswordIcons.append(showPassword, hidePassword);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconst label = document.createElement('span');\r\n\t\t\t\r\n\t\t\tlabel.innerHTML = expectedLabelElement.innerHTML;\r\n\t\t\t\r\n\t\t\texpectedLabelElement.innerHTML = '';\r\n\t\t\texpectedLabelElement.append(expectedFieldElement, label);\r\n\t\t\t\r\n\t\t\tnewFieldGroup.append(/*expectedFieldElement, */expectedLabelElement);\r\n\t\t\t\r\n\t\t\tif (configObject.config?.showPassword && configObject.config?.showIcons)\r\n\t\t\t\tif (_fieldElement.attrib('type') && _fieldElement.attrib('type').toString().toLowerCase() === 'password')\r\n\t\t\t\t\tnewInputGroupWrapper.append(newFieldGroup, togglePasswordIcons, validationIcons);\r\n\t\t\t\telse\r\n\t\t\t\t\tnewInputGroupWrapper.append(newFieldGroup, validationIcons);\r\n\t\t\telse {\r\n\t\t\t\tif (_fieldElement.attrib('type') && _fieldElement.attrib('type').toString().toLowerCase() === 'password' && configObject.config?.showPassword)\r\n\t\t\t\t\tnewInputGroupWrapper.append(newFieldGroup, togglePasswordIcons);\r\n\t\t\t\telse if (configObject.config?.showIcons)\r\n\t\t\t\t\tnewInputGroupWrapper.append(newFieldGroup, validationIcons);\r\n\t\t\t\telse\r\n\t\t\t\t\tnewInputGroupWrapper.append(newFieldGroup);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tnewInputGroup.append(newInputGroupWrapper)\r\n\t\t\tnewFormGroupWrapper.append(newInputGroup, validationText);\r\n\t\t\tformGroup.append(newFormGroupWrapper);\r\n\t\t\t\r\n\t\t\tnewFieldGroup.style.height = `${expectedFieldElement.getBoundingClientRect().height * 2}px`;\r\n\t\t\tfx(expectedLabelElement, form).style({\r\n\t\t\t\theight: '100%',\r\n\t\t\t\t/*display: 'flex',\r\n\t\t\t\talignItems: 'center'*/\r\n\t\t\t});\r\n\t\t} else\r\n\t\t\tformGroup.append(validationText);\r\n\t\tvalidationText.setAttribute('id', `${expectedFieldElement.id}Valid`);\r\n\t\treturn formGroup;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Replace the current selected element(s) with the given one(s) in the Fuxcel Validator Object.\r\n\t *\r\n\t * @param elements {Fuxcel | FuxcelBase | FuxcelValidator}\r\n\t * @private\r\n\t * @return {FuxcelValidator} Fuxcel Validator Object of the selected element.\r\n\t */\r\n\t#_resetFuxcelObject(elements: Fuxcel | FuxcelBase | FuxcelValidator): FuxcelValidator {\r\n\t\tconst documentDOMArray: IterableElement = <Document[]>fx(document).toArray;\r\n\t\t\r\n\t\t// @ts-ignore\r\n\t\tObject.keys(this).forEach(key => delete this[key]);\r\n\t\tthis.length = 0;\r\n\t\tthis.prev = {length: 0};\r\n\t\t\r\n\t\tdocumentDOMArray.forEach((value, key) => {\r\n\t\t\t// @ts-ignore\r\n\t\t\tthis.prev[key] = value;\r\n\t\t\tthis.prev.length++;\r\n\t\t});\r\n\t\t\r\n\t\t(<HTMLElement[]>elements.toArray).forEach((value: HTMLElement, index: number) => {\r\n\t\t\t// @ts-ignore\r\n\t\t\tthis[index] = value;\r\n\t\t\tthis.length++;\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Change initial default validator config with user config\r\n\t *\r\n\t * @param config {Object}\r\n\t * @private\r\n\t * @return {void}\r\n\t */\r\n\t#_touchConfig(config: object): void {\r\n\t\tconst validatorConfigObject: ValidatorConfigObject = this.validatorConfig;\r\n\t\tObject.keys(validatorConfigObject).forEach((key: string) => {\r\n\t\t\t// @ts-ignore\r\n\t\t\tif (key in config && isObject(config[key])) {\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tconst validatorConfigOptionObject = validatorConfigObject[key];\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tconst configOptionObject = config[key];\r\n\t\t\t\t\r\n\t\t\t\tif (Object.keys(configOptionObject).length)\r\n\t\t\t\t\tObject.keys(validatorConfigOptionObject).forEach((optionKey: string) => {\r\n\t\t\t\t\t\tif (optionKey in configOptionObject)\r\n\t\t\t\t\t\t\tif (configOptionObject[optionKey] !== '' && configOptionObject[optionKey] !== null && configOptionObject[optionKey] !== undefined)\r\n\t\t\t\t\t\t\t\tvalidatorConfigOptionObject[optionKey] = configOptionObject[optionKey];\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Perform validation on the form field elements.\r\n\t *\r\n\t * @param that {FuxcelValidator} Current Validator instance\r\n\t * @param formGroup {HTMLElement} Current selected form group\r\n\t * @private\r\n\t * @return {void}\r\n\t */\r\n\t#_validate(that: FuxcelValidator, formGroup: HTMLElement): void {\r\n\t\tconst inputElement = 'input.form-field', selectElement = 'select.form-field', textAreaElement = 'textarea.form-field';\r\n\t\tconst configObject: ValidatorConfigObject = that.#_fxValidatorConfig;\r\n\t\t\r\n\t\tlet refillRequired: boolean,\r\n\t\t\tpasswordToggle = FuxcelValidator.passwordTogglerIconClass,\r\n\t\t\t_inputElement = fx(inputElement, formGroup),\r\n\t\t\t_selectElement = fx(selectElement, formGroup),\r\n\t\t\t_textAreaElement = fx(textAreaElement, formGroup),\r\n\t\t\t_element = that.#_resetFuxcelObject(_inputElement.length ? _inputElement : (_selectElement.length ? _selectElement : _textAreaElement)),\r\n\t\t\t_passwordToggle = fx(passwordToggle, formGroup),\r\n\t\t\tshowPasswordToggle = `#${formGroup.id} ${passwordToggle} > .fx-show-password-icon`,\r\n\t\t\thidePasswordToggle = `#${formGroup.id} ${passwordToggle} > .fx-hide-password-icon`;\r\n\t\t\r\n\t\tconst inputGroupWrapper = fx('.input-group-wrapper', formGroup);\r\n\t\tconst labelElement = fx('label', inputGroupWrapper);\r\n\t\t\r\n\t\t_inputElement.length && _inputElement.upon({\r\n\t\t\tblur: function () {\r\n\t\t\t\tconst _input = that.#_resetFuxcelObject(fx(this));\r\n\t\t\t\t\r\n\t\t\t\tif (inputGroupWrapper.length && labelElement.length) {\r\n\t\t\t\t\tlabelElement.style({color: 'var(--fx-dark)'});\r\n\t\t\t\t\tinputGroupWrapper.style({borderColor: 'var(--fx-border-light)'})\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (configObject.config?.showPassword && _passwordToggle.length)\r\n\t\t\t\t\tif (_input.isPasswordField)\r\n\t\t\t\t\t\t_passwordToggle.hasFocus.then((focused: boolean) => {\r\n\t\t\t\t\t\t\tif (!focused && _input.value()?.length) {\r\n\t\t\t\t\t\t\t\t_input.attrib('type')?.toLowerCase() === 'password' && _passwordToggle.dataAttrib('require-refill', 'true')\r\n\t\t\t\t\t\t\t\trefillRequired = parseBool(_passwordToggle.dataAttrib('require-refill'));\r\n\t\t\t\t\t\t\t\t_input.attrib('type')?.toLowerCase() === 'password' && fx(`${showPasswordToggle}, ${hidePasswordToggle}`).style({animation: 'fadeOut 500ms linear', display: 'none'});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tfocus: function () {\r\n\t\t\t\tconst _input = that.#_resetFuxcelObject(fx(this));\r\n\t\t\t\t\r\n\t\t\t\tif (inputGroupWrapper.length && labelElement.length) {\r\n\t\t\t\t\tlabelElement.style({color: 'var(--fx-purple)'});\r\n\t\t\t\t\tinputGroupWrapper.style({borderColor: 'var(--fx-purple)'});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (configObject.config?.showPassword && _passwordToggle.length)\r\n\t\t\t\t\tif (_input.isPasswordField)\r\n\t\t\t\t\t\t_passwordToggle.hasFocus.then((focused: boolean) => {\r\n\t\t\t\t\t\t\tif (!focused && _input.value()?.length) {\r\n\t\t\t\t\t\t\t\t_input.attrib('type')?.toLowerCase() === 'password' && _passwordToggle.dataAttrib('require-refill', 'true')\r\n\t\t\t\t\t\t\t\trefillRequired = parseBool(_passwordToggle.dataAttrib('require-refill'));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tinput: function () {\r\n\t\t\t\tconst _input = that.#_resetFuxcelObject(fx(this));\r\n\t\t\t\tconst fxId = _input.dataAttrib('fx-id') && _input.dataAttrib('id').toLowerCase();\r\n\t\t\t\tconst fxRole = _input.dataAttrib('fx-role') && _input.dataAttrib('role').toLowerCase();\r\n\t\t\t\t\r\n\t\t\t\tconst elementId = _input.attrib('id') && _input.attrib('id').toLowerCase();\r\n\t\t\t\tconst elementType = _input.attrib('type') && _input.attrib('type').toLowerCase();\r\n\t\t\t\t\r\n\t\t\t\tconst filterField = new Set(['name', 'username', 'card_cvv', 'card_number']);\r\n\t\t\t\tconst filterFieldType = new Set(['date', 'datetime', 'email', 'month']);\r\n\t\t\t\t\r\n\t\t\t\tif (_input.canBeValidated) {\r\n\t\t\t\t\tif (!filterFieldType.has(elementType) && !filterFieldType.has(fxRole) && !filterField.has(elementId) && !filterField.has(fxRole) && !filterField.has(fxId))\r\n\t\t\t\t\t\tif (_input.isPasswordField)\r\n\t\t\t\t\t\t\t_input.#_validatePasswordFields();\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t_input.validateField();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (_input.isEmailField)\r\n\t\t\t\t\t\tconfigObject.config?.validateEmail ? _input.validateEmail(<RegExp>configObject.regExp?.email, configObject.texts?.emailFormat ?? null) : _input.toggleValidation();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (_input.isNameField)\r\n\t\t\t\t\t\tconfigObject.config?.validateName ? _input.validateName(<RegExp>configObject.regExp?.name, configObject.texts?.nameFormat ?? null) : _input.toggleValidation();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (_input.isPhoneField)\r\n\t\t\t\t\t\tconfigObject.config?.validatePhone ? _input.validatePhone(<RegExp>configObject.regExp?.phone, configObject.texts?.phoneFormat ?? null) : _input.toggleValidation();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (_input.isUsernameField)\r\n\t\t\t\t\t\tconfigObject.config?.validateUsername ? _input.validateUsername(<RegExp>configObject.regExp?.username, configObject.texts?.usernameFormat ?? null) : _input.toggleValidation();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (configObject.config?.validateCard) {\r\n\t\t\t\t\t\tif (elementId?.includes('card_cvv') || fxRole?.includes('card_cvv') || fxId?.includes('card_cvv'))\r\n\t\t\t\t\t\t\t_input.validateCardCVV(<RegExp>configObject.regExp?.cardCVV);\r\n\t\t\t\t\t\tif (elementId?.includes('card_number') || fxRole?.includes('card_number') || fxId?.includes('card_number'))\r\n\t\t\t\t\t\t\t_input.validateCardCVV(<RegExp>configObject.regExp?.cardNumber);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif ((elementId?.includes('card_cvv') || fxRole?.includes('card_cvv') || fxId?.includes('card_cvv')) || (elementId?.includes('card_number') || fxRole?.includes('card_number') || fxId?.includes('card_number')))\r\n\t\t\t\t\t\t\t_input.toggleValidation();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfilterFieldType.has(elementType) && elementType !== 'email' && _input.validateField();\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tkeyup: function () {\r\n\t\t\t\tconst _input = that.#_resetFuxcelObject(fx(this));\r\n\t\t\t\t\r\n\t\t\t\tif (_input.isPasswordField)\r\n\t\t\t\t\tif (_input.length)\r\n\t\t\t\t\t\tif (configObject.config?.showPassword && _passwordToggle.length)\r\n\t\t\t\t\t\t\tif (refillRequired && !_input.value()?.length) {\r\n\t\t\t\t\t\t\t\t_passwordToggle.dataAttrib('require-refill', 'false');\r\n\t\t\t\t\t\t\t\trefillRequired = parseBool(_passwordToggle.dataAttrib('require-refill'));\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tif (!refillRequired && _input.value()?.length)\r\n\t\t\t\t\t\t\t\t\tif (_input.attrib('type').toLowerCase() === 'password')\r\n\t\t\t\t\t\t\t\t\t\tFuxcelValidator.#_toggleValidationIcons(hidePasswordToggle, showPasswordToggle);\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\tFuxcelValidator.#_toggleValidationIcons(showPasswordToggle, hidePasswordToggle);\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\trefillRequired = parseBool(_passwordToggle.dataAttrib('require-refill'));\r\n\t\t\t\t\t\t\t\t\tfx(`${showPasswordToggle}, ${hidePasswordToggle}`).style({animation: 'fadeOut 500ms linear', display: 'none'});\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t_selectElement.length && _selectElement.upon({\r\n\t\t\tblur: function () {\r\n\t\t\t\tif (inputGroupWrapper.length && labelElement.length) {\r\n\t\t\t\t\tlabelElement.style({color: 'var(--fx-dark)'});\r\n\t\t\t\t\tinputGroupWrapper.style({borderColor: 'var(--fx-border-light)'})\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tfocus: function () {\r\n\t\t\t\tif (inputGroupWrapper.length && labelElement.length) {\r\n\t\t\t\t\tlabelElement.style({color: 'var(--fx-purple)'});\r\n\t\t\t\t\tinputGroupWrapper.style({borderColor: 'var(--fx-purple)'})\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tchange: function () {\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tconst _element = that.#_resetFuxcelObject(fx(this));\r\n\t\t\t\t_element.canBeValidated && _element.validateField();\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t_textAreaElement.length && _textAreaElement.upon({\r\n\t\t\tblur: function () {\r\n\t\t\t\tif (inputGroupWrapper.length && labelElement.length) {\r\n\t\t\t\t\tlabelElement.style({color: 'var(--fx-dark)'});\r\n\t\t\t\t\tinputGroupWrapper.style({borderColor: 'var(--fx-border-light)'})\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tfocus: function () {\r\n\t\t\t\tif (inputGroupWrapper.length && labelElement.length) {\r\n\t\t\t\t\tlabelElement.style({color: 'var(--fx-purple)'});\r\n\t\t\t\t\tinputGroupWrapper.style({borderColor: 'var(--fx-purple)'})\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tinput: function () {\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tconst _element = that.#_resetFuxcelObject(fx(this));\r\n\t\t\t\t_element.canBeValidated && _element.validateField();\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tif (_element.length) {\r\n\t\t\tconst elementId = _element.attrib('id');\r\n\t\t\t// @ts-ignore\r\n\t\t\tconst fieldName = elementId.toTitleCase();\r\n\t\t\t\r\n\t\t\tif (_element.canBeValidated && (_element.isElement('input') || _element.isElement('select') || _element.isElement('textarea'))) {\r\n\t\t\t\tif (_element.isElement('input')) {\r\n\t\t\t\t\tconst elementType = _element.attrib('type') && _element.attrib('type').toLowerCase();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (configObject.config?.showPassword && _passwordToggle.length)\r\n\t\t\t\t\t\t_passwordToggle.off('touchstart', 'click').upon(['touchstart', 'click'], (e: Event) => {\r\n\t\t\t\t\t\t\tlet clicked = e.target,\r\n\t\t\t\t\t\t\t\t_clicked = fx(clicked),\r\n\t\t\t\t\t\t\t\t_formGroup = _passwordToggle.parents('.form-group'),\r\n\t\t\t\t\t\t\t\t_passwordField = fx(_element, _formGroup);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\t\tif (_clicked[0] === fx(showPasswordToggle)[0]) {\r\n\t\t\t\t\t\t\t\tFuxcelValidator.#_toggleValidationIcons(showPasswordToggle, hidePasswordToggle);\r\n\t\t\t\t\t\t\t\t_passwordField.attrib({type: 'text'});\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tFuxcelValidator.#_toggleValidationIcons(hidePasswordToggle, showPasswordToggle);\r\n\t\t\t\t\t\t\t\t_passwordField.attrib({type: 'password'});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\t\t_passwordField[0].focus({preventScroll: false});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (elementType !== 'checkbox' && elementType !== 'radio' && !_element.value()?.length)\r\n\t\t\t\t\t\tthis.#_manipulateErrorBag(`The ${fieldName} field is required.`);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (!_element.value()?.length)\r\n\t\t\t\t\t\tthis.#_manipulateErrorBag(`The ${fieldName} field is required.`);\r\n\t\t\t\t}\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\t_element.#_resetFuxcelObject(fx(_element[0].form));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Perform validation on password fields.\r\n\t *\r\n\t * @private\r\n\t * @return {void}\r\n\t */\r\n\t#_validatePasswordFields(): void {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\t// @ts-ignore\r\n\t\tconst form: HTMLFormElement = selected[0].form;\r\n\t\tconst configObject = this.validatorConfig;\r\n\t\t\r\n\t\tif (configObject.config?.validatePassword) {\r\n\t\t\tconst pwdField = fx(`#${configObject.config?.passwordId}`, form).formValidator;\r\n\t\t\tconst pwdFieldName = pwdField.fieldAttributes.id.toTitleCase();\r\n\t\t\tconst expectedCpwdField = fx(`#${configObject.config?.passwordConfirmId}`, form);\r\n\t\t\t\r\n\t\t\tif (configObject.regExp?.password) {\r\n\t\t\t\tif (expectedCpwdField.length) {\r\n\t\t\t\t\tconst cpwdField = expectedCpwdField.formValidator;\r\n\t\t\t\t\tconst cpwdFieldName = cpwdField.fieldAttributes.id.toTitleCase();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (!pwdField.value()?.length) {\r\n\t\t\t\t\t\tpwdField.validateField();\r\n\t\t\t\t\t\tcpwdField.validateField(`Check Password.`);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (!cpwdField.value()?.length)\r\n\t\t\t\t\t\t\tcpwdField.validateField(`The ${cpwdFieldName} field is required.`);\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tcpwdField.validateField();\r\n\t\t\t\t\t\tpwdField.validatePassword(configObject.regExp?.password, configObject.texts?.passwordFormat ?? null);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else\r\n\t\t\t\t\tpwdField.validatePassword(configObject.regExp?.password, configObject.texts?.passwordFormat ?? null);\r\n\t\t\t} else {\r\n\t\t\t\tconst minLength = parseInt(pwdField.attrib('minlength') ?? '0');\r\n\t\t\t\tconst maxLength = parseInt(pwdField.attrib('maxlength') ?? '0');\r\n\t\t\t\t\r\n\t\t\t\tif (expectedCpwdField.length) {\r\n\t\t\t\t\tconst cpwdField = expectedCpwdField.formValidator;\r\n\t\t\t\t\tconst cpwdFieldName = cpwdField.fieldAttributes.id.toTitleCase();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (pwdField.value()?.length || cpwdField.value()?.length) {\r\n\t\t\t\t\t\tif (minLength && maxLength)\r\n\t\t\t\t\t\t\tif (minLength === maxLength) {\r\n\t\t\t\t\t\t\t\tif (!pwdField.value()?.length) {\r\n\t\t\t\t\t\t\t\t\tpwdField.validateField();\r\n\t\t\t\t\t\t\t\t\tcpwdField.validateField(`Check Password.`);\r\n\t\t\t\t\t\t\t\t} else if (pwdField.value()?.length !== maxLength) {\r\n\t\t\t\t\t\t\t\t\tpwdField.validateField(`The ${pwdFieldName} field requires ${maxLength} characters.`);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (!cpwdField.value()?.length)\r\n\t\t\t\t\t\t\t\t\t\tcpwdField.validateField(`The ${cpwdFieldName} field is required.`);\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\tcpwdField.validateField(`Check Password.`);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tif (!cpwdField.value()?.length)\r\n\t\t\t\t\t\t\t\t\t\tcpwdField.validateField(`The ${cpwdFieldName} field is required.`);\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\tcpwdField.validateField();\r\n\t\t\t\t\t\t\t\t\tpwdField.validateField();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\t\t\tif (pwdField.value()?.length < minLength || pwdField.value()?.length > maxLength) {\r\n\t\t\t\t\t\t\t\t\tpwdField.validateField(`The ${pwdFieldName} field must be between ${minLength} and ${maxLength} characters.`);\r\n\t\t\t\t\t\t\t\t\tcpwdField.validateField(`Check Password.`);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tif (!cpwdField.value()?.length)\r\n\t\t\t\t\t\t\t\t\t\tcpwdField.validateField(`The ${cpwdFieldName} field is required.`);\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\tcpwdField.validateField();\r\n\t\t\t\t\t\t\t\t\tpwdField.validateField();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (minLength) {\r\n\t\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\t\tif (pwdField.value()?.length < minLength) {\r\n\t\t\t\t\t\t\t\tpwdField.validateField(`The ${pwdFieldName} field requires ${minLength} characters.`);\r\n\t\t\t\t\t\t\t\tcpwdField.validateField(`Check Password.`);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tpwdField.validateField();\r\n\t\t\t\t\t\t\t\tcpwdField.validateField();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif (!cpwdField.value()?.length)\r\n\t\t\t\t\t\t\t\tcpwdField.validateField(`The ${cpwdFieldName} field is required.`);\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tcpwdField.validateField();\r\n\t\t\t\t\t\t\tpwdField.validateField();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tpwdField.validateField();\r\n\t\t\t\t\t\tcpwdField.validateField();\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (minLength && maxLength && pwdField.value()?.length)\r\n\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\tif (pwdField.value()?.length < minLength || pwdField.value()?.length > maxLength)\r\n\t\t\t\t\t\t\tpwdField.validateField(`The ${pwdFieldName} field must be between ${minLength} and ${maxLength} characters.`);\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tpwdField.validateField();\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tpwdField.validateField();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else\r\n\t\t\tthis.validateField();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Checks if the selected field element can be validated by checking that the [data-fx-validate] is not set to false or the parent form-group is not hidden.\r\n\t *\r\n\t * @return {boolean} true if validation is possible; false otherwise\r\n\t */\r\n\tget canBeValidated(): boolean {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\treturn selected.length ?\r\n\t\t\t(this.dataAttrib('fx-validate') ?\r\n\t\t\t\t\tparseBool(this.dataAttrib('fx-validate')) : (\r\n\t\t\t\t\t\tthis.parents('.form-group').length ?\r\n\t\t\t\t\t\t\tthis.parents('.form-group').style('display') !== 'none' :\r\n\t\t\t\t\t\t\tthis.style('display') !== 'none'\r\n\t\t\t\t\t)\r\n\t\t\t) :\r\n\t\t\tfalse;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {object} The error bag for the current selected form.\r\n\t */\r\n\tget errorBag(): object {\r\n\t\t// @ts-ignore\r\n\t\treturn (this.length && this.isElement('form')) && Object.keys(FuxcelValidator.#_validatorErrorBag[this.attrib('id')]).length ? FuxcelValidator.#_validatorErrorBag[this.attrib('id')] : null;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {number} The error count for the current selected form.\r\n\t */\r\n\tget errorCount(): number {\r\n\t\t// @ts-ignore\r\n\t\treturn (this.length && this.isElement('form')) && Object.keys(FuxcelValidator.#_validatorErrorCount).length ? FuxcelValidator.#_validatorErrorCount[this.attrib('id')] : 0;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {object} An object containing the error bag and error count for the current selected form(s). Logs an error to the console if selected element(s) not form element(s).\r\n\t */\r\n\tget getErrors(): object | void {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\tlet errors: object = {};\r\n\t\t\r\n\t\tif (selected.length > 1) {\r\n\t\t\tselected.forEach((element: HTMLElement) => {\r\n\t\t\t\tconst _element = fx(element).formValidator;\r\n\t\t\t\tif (element.tagName && _element.isElement('form')) {\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\terrors[element.id] = {\r\n\t\t\t\t\t\tcount: _element.errorCount,\r\n\t\t\t\t\t\terrors: _element.errorBag\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn errors;\r\n\t\t}\r\n\t\treturn this.isElement('form') ? {\r\n\t\t\tcount: this.errorCount,\r\n\t\t\terrors: this.errorBag,\r\n\t\t} : console.error('Non form element given.');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {object|void} An object containing all form field elements for the current selected form(s). Logs an error to the console if selected element(s) not form element(s).\r\n\t */\r\n\tget formFieldElements(): object | void {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\tif (selected.length > 1) {\r\n\t\t\tconst elements: object = {};\r\n\t\t\tselected.forEach((element) => {\r\n\t\t\t\tif (fx(element).isElement('form')) {\r\n\t\t\t\t\tconst formElement = <HTMLFormElement>element;\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\telements[formElement.id] = formElement.elements;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn elements;\r\n\t\t}\r\n\t\t// @ts-ignore\r\n\t\treturn this.isElement('form') ? <HTMLFormElement>selected[0].elements : console.error('Non form elements given', selected)\r\n\t}\r\n\t\r\n\t/**\r\n\t * Checks if the selected form field element is an email field.\r\n\t *\r\n\t * @return {boolean} true if it is an email field; false otherwise\r\n\t */\r\n\tget isEmailField(): boolean {\r\n\t\tconst attributes = this.fieldAttributes;\r\n\t\treturn attributes.type?.includes('email') || attributes.type?.includes('email') || attributes.id?.includes('email') || attributes.fxId?.includes('email') || attributes.fxRole?.includes('email');\r\n\t}\r\n\t\r\n\t/**\r\n\t * Checks if the selected form field element is a name field.\r\n\t *\r\n\t * @return {boolean} true if it is a name field; false otherwise\r\n\t */\r\n\tget isNameField(): boolean {\r\n\t\tconst attributes = this.fieldAttributes;\r\n\t\treturn !this.isUsernameField && attributes.id === 'name' || attributes.fxId === 'name' || attributes.fxRole === 'name';\r\n\t}\r\n\t\r\n\t/**\r\n\t * Checks if the selected form field element is a password field.\r\n\t *\r\n\t * @return {boolean} true if it is a password field; false otherwise\r\n\t */\r\n\t\r\n\tget isPasswordField(): boolean {\r\n\t\tconst passwordId: string = <string>this.#_fxValidatorConfig.config?.passwordId;\r\n\t\tconst attributes: FieldAttributes = this.fieldAttributes;\r\n\t\treturn attributes.type === 'password' || attributes.id?.includes(passwordId.toLowerCase()) || attributes.fxId?.includes(passwordId.toLowerCase()) || attributes.fxRole?.includes(passwordId.toLowerCase());\r\n\t}\r\n\t\r\n\t/**\r\n\t * Checks if the selected form field element is a phone field.\r\n\t *\r\n\t * @return {boolean} true if it is a phone field; false otherwise\r\n\t */\r\n\tget isPhoneField(): boolean {\r\n\t\tconst attributes = this.fieldAttributes;\r\n\t\treturn attributes.type?.includes('tel') || attributes.type?.includes('phone') || attributes.id?.includes('phone') || attributes.fxId?.includes('phone') || attributes.fxRole?.includes('phone');\r\n\t}\r\n\t\r\n\t/**\r\n\t * Checks if the selected form field element is a username field.\r\n\t *\r\n\t * @return {boolean} true if it is a username field; false otherwise\r\n\t */\r\n\tget isUsernameField(): boolean {\r\n\t\tconst attributes = this.fieldAttributes;\r\n\t\treturn attributes.id?.includes('username') || attributes.fxId?.includes('username') || attributes.fxRole?.includes('username');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {number} the current step the form field belongs to if the form is a step form; -1 otherwise.\r\n\t */\r\n\tget stepFromField(): number {\r\n\t\tconst stepDiv = this.parents(FuxcelValidator.stepsClass);\r\n\t\tif (stepDiv.length)\r\n\t\t\treturn parseInt(stepDiv.dataAttrib('fx-step') ?? '0');\r\n\t\treturn -1;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {ValidationProps} Returns the [ValidationProps](ValidationProps) of the selected form field element.\r\n\t */\r\n\tget validationProps(): ValidationProps {\r\n\t\tconst configObject = this.#_fxValidatorConfig;\r\n\t\t\r\n\t\tconst formGroup: string = <string>configObject.config?.initWrapper;\r\n\t\tconst formId: string = `#${this.fieldAttributes.formId}`;\r\n\t\tconst elementId: string = `#${this.fieldAttributes.id}`;\r\n\t\t\r\n\t\tif (formId)\r\n\t\t\treturn {\r\n\t\t\t\tid: elementId,\r\n\t\t\t\tformGroup: `${formId} ${formGroup + elementId}_group`,\r\n\t\t\t\tvalidationField: `${formId} ${elementId}Valid`,\r\n\t\t\t\tvalidIcon: `${formId} ${formGroup + elementId}_group .validation-icons > .fx-valid-icon`,\r\n\t\t\t\tinvalidIcon: `${formId} ${formGroup + elementId}_group .validation-icons > .fx-invalid-icon`,\r\n\t\t\t\tvalidationIconField: `${formId} ${formGroup + elementId}_group .validation-icons`,\r\n\t\t\t}\r\n\t\tthrow ('Non-Form field element given');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {ValidatorConfigObject} current validator config options object of selected form.\r\n\t */\r\n\tget validatorConfig(): ValidatorConfigObject {\r\n\t\treturn this.#_fxValidatorConfig;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {ValidatorConfigObject} the default validator config object.\r\n\t */\r\n\tstatic get defaultValidatorConfig(): ValidatorConfigObject {\r\n\t\treturn FuxcelValidator.#_defaultConfig;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {string} the password capslock alert class. Default is '.capslock-alert'.\r\n\t */\r\n\tstatic get passwordCapslockAlertClass(): string {\r\n\t\treturn '.capslock-alert'\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {string} the password toggle icon class. Default is '.toggle-password-icons'.\r\n\t */\r\n\tstatic get passwordTogglerIconClass(): string {\r\n\t\treturn '.toggle-password-icons'\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {string} steps class. Default is '.fx-step'.\r\n\t */\r\n\tstatic get stepsClass(): string {\r\n\t\treturn FuxcelValidator.#_stepsClass;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Change the default class for steps.\r\n\t *\r\n\t * @param stepClass {string} class to use for steps.\r\n\t */\r\n\tstatic set stepsClass(stepClass: string) {\r\n\t\tFuxcelValidator.#_stepsClass = stepClass;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Initialize validation on selected form(s).\r\n\t *\r\n\t * _Throws an error if non form elements are selected_\r\n\t *\r\n\t * @param config {ValidatorConfigObject} user config object.\r\n\t * @return {FuxcelSteps | FuxcelValidator} Fuxcel Validator Object of the forms.\r\n\t */\r\n\tinit(config: ValidatorConfigObject | null = null): FuxcelSteps | FuxcelValidator {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\tlet forms = <HTMLFormElement[]>selected.filter((element: HTMLElement) => fx(element).isElement('form')),\r\n\t\t\tnonForms = selected.filter((element: HTMLElement) => !fx(element).isElement('form'));\r\n\t\t\r\n\t\t\r\n\t\tif (forms.length) {\r\n\t\t\tif (nonForms.length)\r\n\t\t\t\tconsole.error(`${nonForms.length} non form-element${nonForms.length === 1 ? '' : 's'} passed to validator:`, nonForms);\r\n\t\t\tconfig && isObject(config) && this.#_touchConfig(config);\r\n\t\t\treturn this.validatorConfig.stepForm?.use ? this.#_initValidateStepForms(forms) : this.#_initValidateForms(forms);\r\n\t\t} else {\r\n\t\t\tconsole.error(`Non form-elements passed to the validator`, nonForms);\r\n\t\t\tthrow (`${nonForms.length} non form-element${nonForms.length === 1 ? '' : 's'} passed to validator.`);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Display validation message.\r\n\t *\r\n\t * @param [message] {string|null=null} message to display [optional]\r\n\t * @param renderType {('error'|'success'|null)} validation type\r\n\t * @return {FuxcelValidator} Fuxcel Validator Object of the current selected element.\r\n\t */\r\n\trenderMessage(message: StringOrNull = null, renderType: StringOrNull = null): FuxcelValidator {\r\n\t\tthis.insertHTML(`<small ${renderType ? 'class=\"' + renderType + '\"' : ''}>${message ?? '&nbsp;'}</small>`);\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Display all validation errors for the selected form.\r\n\t *\r\n\t * @param errors {object} An object containing the errors. The keys are the form field ids and their values are the errors for the fields respectively.\r\n\t * @param messageOrCallbackFn {((fx: FuxcelValidator, e?: CustomEvent) => any)|StringOrNull}\r\n\t * @param callbackFn {((fx: FuxcelValidator, e?: CustomEvent) => any)}\r\n\t */\r\n\trenderValidationErrors(errors: object, messageOrCallbackFn: ((fx: FuxcelValidator, e?: CustomEvent) => any) | StringOrNull = null, callbackFn: ((fx: FuxcelValidator, e?: CustomEvent) => any) | null = null): FuxcelValidator {\r\n\t\tconst selected: FuxcelValidator = this;\r\n\t\t\r\n\t\tif (selected.isElement('form')) {\r\n\t\t\tconst fieldElements = this.formFieldElements;\r\n\t\t\tif (isObject(errors))\r\n\t\t\t\tObject.keys(errors).forEach((elementId: string) => {\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\tconst fieldName = elementId.toString().toTitleCase();\r\n\t\t\t\t\tconst element: FuxcelValidator = fx(`#${elementId}`).formValidator;\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\tif (elementId in fieldElements && (isDefined(errors[elementId])))\r\n\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\telement.validateField(errors[elementId], true);\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\tif (isString(errors[elementId]) && errors[elementId] !== undefined)\r\n\t\t\t\t\t\t\telement.validateField(`Verify ${fieldName} and try again.`, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\r\n\t\t\t// @ts-ignore\r\n\t\t\tfx('.fx-valid-error')[0].scrollIntoView({\r\n\t\t\t\tbehavior: \"smooth\", // Smooth scrolling\r\n\t\t\t\tblock: \"center\",    // Scroll to the top of the target\r\n\t\t\t});\r\n\t\t} else\r\n\t\t\tconsole.warn('Non form element given.');\r\n\t\t\r\n\t\ttypeof messageOrCallbackFn === \"string\" ?\r\n\t\t\t// @ts-ignore\r\n\t\t\tfx.modal({\r\n\t\t\t\ttype: 'error',\r\n\t\t\t\tcontent: messageOrCallbackFn,\r\n\t\t\t\tconfirmButtonText: 'Ok',\r\n\t\t\t\tonConfirm: (e) => typeof callbackFn === 'function' && callbackFn(this, e)\r\n\t\t\t}) : typeof messageOrCallbackFn === 'function' && messageOrCallbackFn(this);\r\n\t\t\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Show validation error for the selected field.\r\n\t *\r\n\t * @param message {string|null=null} Validation message.\r\n\t * @return {void}\r\n\t */\r\n\tshowError(message: StringOrNull = null): void {\r\n\t\tconst fieldAttribs = this.fieldAttributes;\r\n\t\tconst validationProps = this.validationProps;\r\n\t\t\r\n\t\t// @ts-ignore\r\n\t\tconst finalMessage: string = message ?? `The ${fieldAttribs.id?.toTitleCase()} field is required`;\r\n\t\t\r\n\t\tthis.#_manipulateErrorBag(finalMessage);\r\n\t\tthis.#_fxValidatorConfig.config?.showIcons && FuxcelValidator.#_toggleValidationIcons(validationProps.validIcon, validationProps.invalidIcon);\r\n\t\t\r\n\t\tfx(validationProps.validationField).length && fx(validationProps.validationField).formValidator.renderMessage(finalMessage ?? null);\r\n\t\t\r\n\t\tif (this.#_fxValidatorConfig.config?.useDefaultStyling)\r\n\t\t\tfx(`${validationProps.formGroup} .form-group-wrapper`).replaceClass('fx-valid-success', 'fx-valid-error');\r\n\t\telse\r\n\t\t\tfx(validationProps.formGroup).replaceClass('fx-valid-success', 'fx-valid-error');\r\n\t\t// this.#_manipulateErrorCount();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Show validation success.\r\n\t *\r\n\t * @param message {string|null=null} Validation message.\r\n\t * @return {void}\r\n\t */\r\n\tshowSuccess(message: StringOrNull = null): void {\r\n\t\tconst validationProps = this.validationProps;\r\n\t\t\r\n\t\tthis.#_manipulateErrorBag(true);\r\n\t\tthis.#_fxValidatorConfig.config?.showIcons && FuxcelValidator.#_toggleValidationIcons(validationProps.invalidIcon, validationProps.validIcon);\r\n\t\t\r\n\t\tfx(validationProps.validationField).length && fx(validationProps.validationField).formValidator.renderMessage(message ?? null);\r\n\t\t\r\n\t\tif (this.#_fxValidatorConfig.config?.useDefaultStyling)\r\n\t\t\tfx(`${validationProps.formGroup} .form-group-wrapper`).replaceClass('fx-valid-error', 'fx-valid-success');\r\n\t\telse\r\n\t\t\tfx(validationProps.formGroup).replaceClass('fx-valid-error', 'fx-valid-success');\r\n\t\t// this.#_manipulateErrorCount();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Toggle between validating and removing validation from the selected field.\r\n\t *\r\n\t * @return {FuxcelValidator} Fuxcel Validator Object of the forms.\r\n\t */\r\n\ttoggleValidation(): FuxcelValidator {\r\n\t\treturn this.canBeValidated ? this.validateField() : this.undoValidation();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Remove validation from the selected field element. Also remove the error from the error bag if destroyValidation parameter is set tot true.\r\n\t *\r\n\t * @param destroyValidation {boolean = false}\r\n\t * @return {FuxcelValidator} Fuxcel Validator Object of the forms.\r\n\t */\r\n\tundoValidation(destroyValidation: boolean = false): FuxcelValidator {\r\n\t\tconst selected: FuxcelValidator = this;\r\n\t\tconst fieldAttribs = selected.fieldAttributes;\r\n\t\tconst validationProps = selected.validationProps;\r\n\t\t\r\n\t\tif (destroyValidation) {\r\n\t\t\t// @ts-ignore\r\n\t\t\tdelete FuxcelValidator.#_validatorErrorBag[fieldAttribs.formId][fieldAttribs.id];\r\n\t\t\t// @ts-ignore\r\n\t\t\tFuxcelValidator.#_validatorErrorCount[fieldAttribs.formId] = Object.keys(FuxcelValidator.#_validatorErrorCount[fieldAttribs.formId]).length\r\n\t\t}\r\n\t\t\r\n\t\tif (selected.#_fxValidatorConfig.config?.useDefaultStyling)\r\n\t\t\tfx(`${validationProps.formGroup} .form-group-wrapper`).removeClass('fx-valid-error', 'fx-valid-success');\r\n\t\telse\r\n\t\t\tfx(validationProps.formGroup).removeClass('fx-valid-error', 'fx-valid-success');\r\n\t\t!!fx(`${validationProps.validationIconField} > *`)?.length ?\r\n\t\t\tfx(`${validationProps.validationIconField} > *`).fadeout().then((e: Fuxcel) => fx(validationProps.validationField).formValidator.renderMessage(null)) :\r\n\t\t\tfx(validationProps.validationField).formValidator.renderMessage(null);\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns the error bag for the given step of the current selected element.\r\n\t *\r\n\t * @param step {number|string} Given step.\r\n\t * @return {object} The error bag for the given step of the current selected step form.\r\n\t */\r\n\tstepErrorBag(step: number | string): object {\r\n\t\t// @ts-ignore\r\n\t\treturn (this.length && this.isElement('form')) && Object.keys(FuxcelValidator.#_validatorErrorBag[this.attrib('id')][step]).length ? FuxcelValidator.#_validatorErrorBag[this.attrib('id')][step] : null;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns the error count for the given step of the current selected element.\r\n\t *\r\n\t * @param step {number|string} Given step.\r\n\t * @return {object} The error count for the given step of the current selected step form.\r\n\t */\r\n\tstepErrorCount(step: number | string): number {\r\n\t\t// @ts-ignore\r\n\t\treturn (this.length && this.isElement('form')) && Object.keys(FuxcelValidator.#_validatorErrorCount[this.attrib('id')]).length ? FuxcelValidator.#_validatorErrorCount[this.attrib('id')][step] : 0;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Validate Card CVV field using Regular Expression\r\n\t *\r\n\t * @param regExp {RegExp} Regular expression to use.\r\n\t * @param customFormatEx {string|null=null} Custom format example to show user.\r\n\t * @return {FuxcelValidator} Fuxcel Validator Object of the selected element.\r\n\t */\r\n\tvalidateCardCVV(regExp: RegExp, customFormatEx: StringOrNull = null): FuxcelValidator {\r\n\t\treturn this.validateRegex(regExp, `${customFormatEx ?? 'Invalid CVV.'}`);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Validate Card Number field using Regular Expression\r\n\t *\r\n\t * @param regExp {RegExp} Regular expression to use.\r\n\t * @param customFormatEx {string|null=null} Custom format example to show user\r\n\t * @return {FuxcelValidator} Fuxcel Validator Object of the selected element.\r\n\t */\r\n\tvalidateCardNumber(regExp: RegExp, customFormatEx: StringOrNull = null): FuxcelValidator {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\t// @ts-ignore\r\n\t\tconst value: string = selected[0].value;\r\n\t\t\r\n\t\treturn this.validateRegex(() => value.length ? (value.match(regExp) ?\r\n\t\t\t// @ts-ignore\r\n\t\t\t(fx.passLuhnAlgo(selected[0]) ? this.validateField() : this.validateField('Check Card Number and try again.', true)) :\r\n\t\t\tthis.validateField(`${customFormatEx ?? 'Only numbers are allowed.'}`)) : this.toggleValidation());\r\n\t}\r\n\t\r\n\t/**\r\n\t * Validate Email field using Regular Expression.\r\n\t *\r\n\t * @param regExp {RegExp} Regular expression to use.\r\n\t * @param customFormatEx {string|null=null} Custom format example to show user.\r\n\t * @return {FuxcelValidator} Fuxcel Validator Object of the selected element.\r\n\t **/\r\n\tvalidateEmail(regExp: RegExp, customFormatEx: StringOrNull = null): FuxcelValidator {\r\n\t\treturn this.validateRegex(regExp, `Invalid E-Mail format: (eg. ${customFormatEx ?? 'johndoe@email.com'})`);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Validate the selected field.\r\n\t *\r\n\t * @param message {string|null=null} Validation message to display.\r\n\t * @param isError {boolean=false} If true and the message parameter is null, an automatic error message is generated.\r\n\t * @return {FuxcelValidator} Fuxcel Validator Object of the selected element.\r\n\t */\r\n\tvalidateField(message: StringOrNull = null, isError: boolean = false): FuxcelValidator {\r\n\t\tconst selected: FuxcelValidator = this;\r\n\t\tconst fieldAttribs = selected.fieldAttributes;\r\n\t\tconst configObject = this.#_fxValidatorConfig.config;\r\n\t\t// @ts-ignore\r\n\t\tconst target: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement = selected[0];\r\n\t\t\r\n\t\tlet fieldValue = target.value,\r\n\t\t\tminLength = parseInt(selected.attrib('minlength') ?? '0'),\r\n\t\t\tfieldName = fieldAttribs.id.toTitleCase(),\r\n\t\t\tfinalMessage = minLength ?\r\n\t\t\t\t(!isString(message) && fieldValue.length && fieldValue.length < minLength ? `The ${fieldName} field requires a minimum of ${minLength} characters.` : message) :\r\n\t\t\t\t(!isString(message) ?\r\n\t\t\t\t\t(selected.isPasswordField ?\r\n\t\t\t\t\t\t((fieldAttribs.id === configObject?.passwordConfirmId && configObject?.validatePassword) ? ((!fieldValue.length || fieldValue !== fx(`#${configObject.passwordId}`).value()) ? (fx(`#${configObject.passwordId}`).value()?.length ? 'Ensure passwords.' : `The ${fieldName} field is required.`) : null) : (!fieldValue.length ? `The ${fieldName} field is required.` : null)) :\r\n\t\t\t\t\t\tmessage) :\r\n\t\t\t\t\tmessage);\r\n\t\t\r\n\t\tif (!fieldValue || !fieldValue.length || fieldValue.length < minLength || (selected.isPasswordField && (!fieldValue.length || finalMessage)) || isError)\r\n\t\t\tselected.showError(finalMessage);\r\n\t\telse\r\n\t\t\tselected.showSuccess(finalMessage);\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Validate Name field using Regular Expression\r\n\t *\r\n\t * @param regExp {RegExp} Regular expression to use.\r\n\t * @param customFormatEx {string|null=null} Custom format example to show user.\r\n\t * @return {FuxcelValidator} Fuxcel Validator Object of the selected element.\r\n\t */\r\n\tvalidateName(regExp: RegExp, customFormatEx: StringOrNull = null): FuxcelValidator {\r\n\t\treturn this.validateRegex(regExp, `Invalid Name format: (eg. ${customFormatEx ?? 'john doe, john doe woods'})`);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Validate Password field using Regular Expression\r\n\t *\r\n\t * @param regExp {RegExp} Regular expression to use\r\n\t * @param customFormatEx {string|null=null} Custom format example to show user.\r\n\t * @return {FuxcelValidator} Fuxcel Validator Object of the selected element.\r\n\t */\r\n\tvalidatePassword(regExp: RegExp, customFormatEx: StringOrNull = null): FuxcelValidator {\r\n\t\treturn this.validateRegex(regExp, `Invalid Password format: (${customFormatEx ?? 'Password requires a minimum of 8 characters an must contain at least 1 uppercase and 1 special character'})`);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Validate Phone field using Regular Expression\r\n\t *\r\n\t * @param regExp {RegExp} Regular expression to use\r\n\t * @param customFormatEx {string|null=null} Custom format example to show user.\r\n\t * @return {FuxcelValidator} Fuxcel Validator Object of the selected element.\r\n\t */\r\n\tvalidatePhone(regExp: RegExp, customFormatEx: StringOrNull = null): FuxcelValidator {\r\n\t\treturn this.validateRegex(regExp, `Invalid Phone format: (eg. ${customFormatEx ?? '+234 8156547099, +1 104 2198'})`);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Validate field using Regular Expression or a callback function\r\n\t *\r\n\t * @param regExpOrFn {Function|RegExp} Regular Expression or callback function to use.\r\n\t * @return {FuxcelValidator} Fuxcel Validator Object of the selected element.\r\n\t */\r\n\tvalidateRegex(regExpOrFn: Function): FuxcelValidator\r\n\tvalidateRegex(regExpOrFn: RegExp, message: string): FuxcelValidator\r\n\tvalidateRegex(regExpOrFn: Function | RegExp, message?: StringOrNull): FuxcelValidator {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\t// @ts-ignore\r\n\t\tconst value: string = selected[0].value;\r\n\t\t\r\n\t\t(regExpOrFn && typeof regExpOrFn === 'function') ? regExpOrFn(this) :\r\n\t\t\t(regExpOrFn && isString(message) ? ((value.length) ? (value.match(<RegExp>regExpOrFn) ? this.validateField() : this.validateField(message, true)) : this.validateField()) : console.error('Function \\`validateRegex()\\` expects 2 arguments.'));\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Validate Username field using Regular Expression\r\n\t *\r\n\t * @param regExp {RegExp} Regular expression to use\r\n\t * @param customFormatEx {string|null=null} Custom format example to show user.\r\n\t * @return {FuxcelValidator} Fuxcel Validator Object of the selected element.\r\n\t */\r\n\tvalidateUsername(regExp: RegExp, customFormatEx: StringOrNull = null): FuxcelValidator {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.toArray;\r\n\t\t// @ts-ignore\r\n\t\tconst value: string = selected[0].value;\r\n\t\tconst minLength = parseInt(this.attrib('minlength') ?? '2');\r\n\t\t// @ts-ignore\r\n\t\tconst fieldName = selected[0].id.toTitleCase();\r\n\t\t\r\n\t\treturn this.validateRegex(() => value.length ? (value.length > minLength ?\r\n\t\t\t(value.match(regExp) ? this.validateField() : this.validateField(`Invalid Username format: (${customFormatEx ?? 'Username must start and end with an alphabet, and can only contain alphabets and underscores.'})`)) :\r\n\t\t\tthis.validateField(customFormatEx ?? `The ${fieldName} requires a minimum of 3 characters.`)) : this.toggleValidation());\r\n\t}\r\n}\r\n\r\nclass FuxcelSteps extends FuxcelValidator implements FuxcelStepsInterface {\r\n\treadonly #that: FuxcelValidator;\r\n\tstatic currentlySelected: object = {};\r\n\t\r\n\tconstructor(selected: FuxcelValidator) {\r\n\t\tsuper(selected);\r\n\t\tthis.#that = selected;\r\n\t\t\r\n\t\ttry {\r\n\t\t\t// @ts-ignore\r\n\t\t\tif (Steps.constructor.name.length && selected.validatorConfig.stepForm.plugin)\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tnew Steps(selected[0]).init(selected.validatorConfig.stepForm.config);\r\n\t\t} catch (e) {\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {FuxcelSteps} Fuxcel Validator Object of the selected element.\r\n\t */\r\n\tget context(): FuxcelSteps {\r\n\t\treturn new FuxcelSteps(<any>FuxcelSteps.currentlySelected);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {object | (number | string)[]} If more than one selected form element - An Object containing all form steps in arrays respectively; else an array of all steps in the form.\r\n\t */\r\n\tget formSteps(): object | (number | string)[] {\r\n\t\tconst steps: (number | string)[] = [];\r\n\t\t\r\n\t\tif (this.length > 1) {\r\n\t\t\tconst allSteps = {};\r\n\t\t\t(<HTMLElement[]>this.toArray).forEach((form: HTMLElement) => {\r\n\t\t\t\tif (fx(form).isElement('form')) {\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\tallSteps[<HTMLFormElement>form.id] = [];\r\n\t\t\t\t\tconst stepDivs: Fuxcel = fx(FuxcelValidator.stepsClass, form);\r\n\t\t\t\t\t\r\n\t\t\t\t\tstepDivs.length && (<HTMLElement[]>stepDivs.toArray).forEach((stepDiv: HTMLElement) => {\r\n\t\t\t\t\t\tconst step = stepDiv.dataset.fxStep;\r\n\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\tisString(step) && step !== undefined && (allSteps[<HTMLFormElement>form.id]).push(step)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn allSteps;\r\n\t\t}\r\n\t\t\r\n\t\tif (this.isElement('form')) {\r\n\t\t\tconst stepDivs: Fuxcel = fx(FuxcelValidator.stepsClass, this);\r\n\t\t\t\r\n\t\t\tstepDivs.length && (<HTMLElement[]>stepDivs.toArray).forEach((stepDiv: HTMLElement) => {\r\n\t\t\t\tconst step = stepDiv.dataset.fxStep;\r\n\t\t\t\tisString(step) && step !== undefined && steps.push(step);\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn steps;\r\n\t}\r\n\t\r\n\t/**\r\n\t * An object containing the error bag and error count for the current selected step form(s). Logs an error to the console if selected element(s) not form element(s).\r\n\t *\r\n\t * _Error bag for the specified step if the step is given._\r\n\t *\r\n\t * _All errors if step is not specified._\r\n\t *\r\n\t * @param step {number|string|null = null}\r\n\t * @return {{count: number, errors: Object}|void}\r\n\t */\r\n\tstepErrors(step: number | string | null = null): object | void {\r\n\t\tconst selected: IterableElement = <HTMLElement[]>this.context.toArray;\r\n\t\tlet errors: object = {};\r\n\t\t\r\n\t\tif (step === null) {\r\n\t\t\tselected.forEach((element: HTMLElement) => {\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tconst _element = new FuxcelSteps(element);\r\n\t\t\t\tif (element.tagName && _element.isElement('form')) {\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\terrors[element.id] = {};\r\n\t\t\t\t\tconst steps = <(number | string)[]>_element.formSteps;\r\n\t\t\t\t\tif (steps.length) {\r\n\t\t\t\t\t\tsteps.forEach(step => {\r\n\t\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\t\terrors[element.id][step] = {\r\n\t\t\t\t\t\t\t\tcount: _element.stepErrorCount(step),\r\n\t\t\t\t\t\t\t\terrors: _element.stepErrorBag(step)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn errors;\r\n\t\t}\r\n\t\t\r\n\t\treturn this.context.isElement('form') ? {\r\n\t\t\tcount: this.context.stepErrorCount(<string | number>step),\r\n\t\t\terrors: this.context.stepErrorBag(<string | number>step),\r\n\t\t} : console.error('Non form element given.');\r\n\t}\r\n}\r\n\r\nclass FuxcelModal extends Fuxcel implements FuxcelModalInterface {\r\n\t#_isHiding = false;\r\n\t\r\n\tstatic #_modalTarget: Fuxcel;\r\n\tstatic #_openModals: FuxcelModal[] = [];\r\n\tstatic fxModalCancelButtonClick = new Event('click');\r\n\t\r\n\t/**\r\n\t * @returns {CustomEvent} modal show event - fx.modal.show event\r\n\t */\r\n\tstatic fxModalShowEvent = new CustomEvent('fx.modal.show', {\r\n\t\tbubbles: true,\r\n\t\tdetail: {\r\n\t\t\tplugins: 'Fuxcel',\r\n\t\t\tinterface: 'FuxcelModalInterface'\r\n\t\t},\r\n\t\t\r\n\t});\r\n\t\r\n\t/**\r\n\t * @returns {CustomEvent} modal hide event - fx.modal.hide event\r\n\t */\r\n\tstatic fxModalHideEvent = new CustomEvent('fx.modal.hide', {\r\n\t\tbubbles: true,\r\n\t\tdetail: {\r\n\t\t\tplugins: 'Fuxcel',\r\n\t\t\tinterface: 'FuxcelModalInterface'\r\n\t\t},\r\n\t});\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tconstructor(selector: string | IterableElement | any, context?: string | IterableElement | any, autoActions: boolean = true) {\r\n\t\tsuper(selector, context);\r\n\t\t\r\n\t\tif (FuxcelModal.modalTriggers.length) {\r\n\t\t\tFuxcelModal.modalTriggers.off('click').upon('click', function (e) {\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tconst currentTrigger = fx(e.currentTarget);\r\n\t\t\t\tconst modalAction = currentTrigger.dataAttrib('fx-action')?.toLowerCase() ?? 'open';\r\n\t\t\t\tconst modalTarget = currentTrigger.dataAttrib('fx-action')?.length ?\r\n\t\t\t\t\t(currentTrigger.parents('.fx-modal').length ? currentTrigger.parents('.fx-modal') : null) :\r\n\t\t\t\t\tfx(`#${currentTrigger.dataAttrib('fx-modal')}`);\r\n\t\t\t\t\r\n\t\t\t\tconst triggerModal = () => {\r\n\t\t\t\t\tif (modalTarget) {\r\n\t\t\t\t\t\tFuxcelModal.#_modalTarget = modalTarget;\r\n\t\t\t\t\t\tif (autoActions)\r\n\t\t\t\t\t\t\tif (modalAction === 'close')\r\n\t\t\t\t\t\t\t\tFuxcelModal.#_modalTarget.modal.hide();\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tFuxcelModal.#_modalTarget.modal.toggle();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t(currentTrigger.parents('.fx-modal').length && !currentTrigger.parents('.fx-modal').attrib('id')?.includes('init')) ? triggerModal() : (!currentTrigger.parents('.fx-modal').length && triggerModal());\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t} else\r\n\t\t\tconsole.error('Target modal not found.');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {FuxcelModal | null} FuxcelModal object of Current open modal.\r\n\t */\r\n\tstatic get currentModal(): FuxcelModal | null {\r\n\t\treturn this.hasOpenModals ? FuxcelModal.#_openModals[FuxcelModal.#_openModals.length - 1] : null;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {boolean} true if any modal is open. False otherwise.\r\n\t */\r\n\tstatic get hasOpenModals(): boolean {\r\n\t\treturn !!FuxcelModal.#_openModals.length\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return {Fuxcel}\r\n\t */\r\n\tstatic get modalTriggers(): Fuxcel {\r\n\t\treturn fx('*[data-fx-target=\"modal\"]');\r\n\t}\r\n\t\r\n\t/**\r\n\t * Generate a simple Modal with required given parameters.\r\n\t *\r\n\t * @param title {string} The Modal title.\r\n\t * @param html {boolean} Is modal content HTML or Text.\r\n\t * @param content {string} The Content for the body of the Modal.\r\n\t * @param id {string} id to use for the Modal.\r\n\t * @param hasFooter {boolean} If the Modal should be created with a footer.\r\n\t * @return {HTMLElement} Generated Modal.\r\n\t */\r\n\tstatic init({title = null, html = true, content, id, hasFooter}: ModalInit): HTMLElement {\r\n\t\tconst fxModal = document.createElement('div');\r\n\t\tconst modalDialog = document.createElement('div');\r\n\t\tconst modalContent = document.createElement('div');\r\n\t\tconst modalHeader = document.createElement('div');\r\n\t\tconst modalBody = document.createElement('div');\r\n\t\tconst modalFooter = document.createElement('div');\r\n\t\t\r\n\t\tconst modalTitle = document.createElement('div');\r\n\t\tconst modalCloseButton = document.createElement('div');\r\n\t\t\r\n\t\tfxModal.id = id;\r\n\t\tfxModal.classList.add('fx-modal', 'filter');\r\n\t\t\r\n\t\ttitle && (modalTitle.innerHTML = title);\r\n\t\thtml ? (modalBody.innerHTML = content) : (modalBody.innerText = content);\r\n\t\t\r\n\t\tmodalCloseButton.dataset.fxAction = 'close';\r\n\t\tmodalCloseButton.dataset.fxTarget = 'modal';\r\n\t\t\r\n\t\tmodalTitle.classList.add('title');\r\n\t\tmodalCloseButton.classList.add('close');\r\n\t\t\r\n\t\tmodalDialog.classList.add('fx-modal-dialog', 'fx-dialog-centered', 'fx-dialog-scrollable');\r\n\t\tmodalContent.classList.add('fx-modal-content');\r\n\t\tmodalHeader.classList.add('fx-modal-header');\r\n\t\tmodalBody.classList.add('fx-modal-body');\r\n\t\tmodalFooter.classList.add('fx-modal-footer');\r\n\t\t\r\n\t\t\r\n\t\tmodalHeader.append(modalTitle, modalCloseButton);\r\n\t\tmodalContent.append(modalHeader, modalBody, modalFooter);\r\n\t\tmodalDialog.append(modalContent);\r\n\t\tfxModal.append(modalDialog);\r\n\t\t\r\n\t\t!title && modalContent.removeChild(modalHeader);\r\n\t\t!hasFooter && modalContent.removeChild(modalFooter);\r\n\t\treturn fxModal;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Destroy selected modal.\r\n\t */\r\n\tdestroy(): void {\r\n\t\t// @ts-ignore\r\n\t\tthis[0].remove()\r\n\t}\r\n\t\r\n\t/**\r\n\t * Close selected modal.\r\n\t *\r\n\t * @param destroy {boolean}\r\n\t */\r\n\thide(destroy: boolean = false): void {\r\n\t\tconst modalContent = fx('.fx-modal-content', this);\r\n\t\t\r\n\t\tif (!this.#_isHiding) {\r\n\t\t\tthis.#_isHiding = true;\r\n\t\t\tmodalContent.fadeout(500).then(() => this.fadeout(500).then(() => {\r\n\t\t\t\tconst index = FuxcelModal.#_openModals.indexOf(this);\r\n\t\t\t\t\r\n\t\t\t\tif (index !== -1)\r\n\t\t\t\t\tFuxcelModal.#_openModals.splice(index, 1);\r\n\t\t\t\t\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tthis[0].dispatchEvent(FuxcelModal.fxModalHideEvent);\r\n\t\t\t\tdestroy && this.destroy();\r\n\t\t\t\t\r\n\t\t\t\tthis.#_isHiding = false;\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Open selected modal.\r\n\t *\r\n\t * @param escKey {boolean=true} Allow closing the modal using the Escape on the KeyBoard if set to true. True by default.\r\n\t */\r\n\tshow(escKey: boolean | undefined = true): void {\r\n\t\tconst modalContent = fx('.fx-modal-content', this);\r\n\t\t\r\n\t\tthis.style({pointerEvents: 'none'}).fadein(300).then(() => modalContent.fadein(300).then(() => {\r\n\t\t\tFuxcelModal.#_openModals.push(this);\r\n\t\t\tthis.style({pointerEvents: 'unset'});\r\n\t\t\t\r\n\t\t\tif (!parseBool(this.dataAttrib('fx-static')))\r\n\t\t\t\t// Hide modal if mouse is left-clicked outside the modal content [Trigger clicking on either buttons if any is available].\r\n\t\t\t\tthis.upon('click', () => modalContent.hasFocus.then((focused: boolean) => !focused ? this.hide() : null))\r\n\t\t\t\r\n\t\t\tif (escKey)\r\n\t\t\t\tfx(document)./* off('keyup'). */upon('keyup', (e: Event) => {\r\n\t\t\t\t\tconst event = <KeyboardEvent>e;\r\n\t\t\t\t\tconst key = event.key.toLowerCase();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (key === 'escape' || key === 'esc')\r\n\t\t\t\t\t\tif (FuxcelModal.hasOpenModals)\r\n\t\t\t\t\t\t\tFuxcelModal.currentModal?.hide(true);\r\n\t\t\t\t});\r\n\t\t\t\r\n\t\t\t// @ts-ignore\r\n\t\t\tthis[0].dispatchEvent(FuxcelModal.fxModalShowEvent)\r\n\t\t}));\r\n\t}\r\n\t\r\n\t/**\r\n\t * Toggle between close and open of the selected modal.\r\n\t */\r\n\ttoggle(): void {\r\n\t\tif (this.style('display') === 'none')\r\n\t\t\tthis.show()\r\n\t\telse\r\n\t\t\tthis.hide();\r\n\t}\r\n}\r\n\r\n/**\r\n * Perform a fetch request using the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\r\n *\r\n * It provides a convenient way to perform fetch requests with various options and callbacks.\r\n *\r\n * It supports different HTTP methods, request data, response data types, and allows for the execution of custom functions before sending the request, after completion, on success, and on error.\r\n *\r\n * @param uri {string} Request URL.\r\n * @param method {('get'|'post'|'put'|'patch'|'delete'|null)} Request method.\r\n * @param data {Object|BodyInit}  Additional request data.\r\n * @param dataType {('html'|'json'|'jsonp'|'script'|'text'|'xml'|null)} Expected return data type.\r\n * @param headers {Object|Headers} Additional Headers to be sent along the request.\r\n * @param beforeSend {Function|null = null} Before request is sent.\r\n * @param timeout {number} Request Timeout.\r\n * @param onComplete {((response: ResponseData, status: number, statusText: string) => void)|null = null} Once request is completed.\r\n * @param onError {((error: any, status: number, statusText: string) => void)|null = null} If request has errors.\r\n * @param onSuccess {((response: ResponseData, status: number, statusText: string) => void)|null = null} If request is successful.\r\n */\r\nfx.fetch = function ({uri = '', method = 'get', data = null, dataType = 'json', headers = null, beforeSend = null, timeout = 10000, onComplete = null, onError = null, onSuccess = null}: FXRequestType) {\r\n\tlet status: number,\r\n\t\tstatusText: string,\r\n\t\tresponseData: ResponseData;\r\n\t\r\n\tconst controller: AbortController = new AbortController();\r\n\tconst timeoutID = setTimeout(() => controller.abort(), timeout);\r\n\t\r\n\tconst allowedErrorStatuses: Set<number> = new Set([301, 308, 401, 402, 419, 422, 423, 426, 451, 500, 511]);\r\n\tconst defaultHeaders = {\r\n\t\t'X-Requested-With': 'XMLHttpRequest'\r\n\t};\r\n\tisFunction(beforeSend) && (<Function>beforeSend)()\r\n\t\r\n\tif (data?.constructor.name.toLowerCase() === 'object') {\r\n\t\tconst formData: FormData = new FormData();\r\n\t\t// @ts-ignore\r\n\t\tObject.keys(data).forEach(key => formData.append(key, data[key]));\r\n\t\tdata = formData;\r\n\t}\r\n\tif (headers?.constructor.name.toLowerCase() === 'object')\r\n\t\t// @ts-ignore\r\n\t\tObject.keys(headers).forEach(key => defaultHeaders[key] = headers[key]);\r\n\theaders = defaultHeaders;\r\n\t\r\n\tfetch(uri, {\r\n\t\tmethod: <string>method,\r\n\t\tbody: <BodyInit | null>data,\r\n\t\theaders: <Headers>headers,\r\n\t\tsignal: controller.signal,\r\n\t}).then(response => {\r\n\t\tresponseData = response;\r\n\t\tstatus = responseData.status;\r\n\t\tstatusText = responseData.statusText\r\n\t\t\r\n\t\ttry {\r\n\t\t\t// @ts-ignore\r\n\t\t\tconst consumedData = response[dataType]()\r\n\t\t\treturn (consumedData && responseData.ok || (status > 199 && status < 300) || allowedErrorStatuses.has(status)) ? consumedData : Promise.reject(response);\r\n\t\t} catch (e) {\r\n\t\t\treturn Promise.reject(e);\r\n\t\t}\r\n\t}).then(data => {\r\n\t\tresponseData.responseJSON = dataType === 'json' && data;\r\n\t\tresponseData.responseText = dataType === 'json' ? JSON.stringify(data) : (dataType === 'text' && data);\r\n\t\t\r\n\t\tstatus > 199 && status < 300 && onSuccess && isFunction(onSuccess) && onSuccess(responseData, status, statusText);\r\n\t\tonComplete && isFunction(onComplete) && onComplete(responseData, status, statusText);\r\n\t}).catch(error => {\r\n\t\t(isFunction(onError)) && (error.name === 'AbortError') ?\r\n\t\t\t(<Function>onError)(new TimeoutError(`\u23F0 Request timed out\\r\\nSet Timeout:${timeout / 1000}s`), 408, 'timeout') :\r\n\t\t\t(<Function>onError)(error, status, statusText)\r\n\t}).finally(() => clearTimeout(timeoutID));\r\n};\r\n\r\n/**\r\n * Create quick simple modal with callbacks.\r\n *\r\n * @param title {string|null=null} Modal Title.\r\n * @param type {('success' | 'warning' | 'error')} Modal Type.\r\n * @param content {string|null=null} Body Content of Modal.\r\n * @param confirmButtonText {string|null=null} Text for Confirm Button.\r\n * @param cancelButtonText {string|null=null} Text for Cancel Button.\r\n * @param html {boolean} Use HTML content? else use Text content.\r\n * @param onConfirm {((e: CustomEvent, modal: FuxcelModal) => void) | null} Callback on confirm button click.\r\n * @param onCancel {(e: CustomEvent, modal: FuxcelModal) => void | null} Callback on cancel button click.\r\n * @param onEsc {(e: CustomEvent, modal: FuxcelModal) => void | null} Callback on Escape key used. Only works when cancel button is not available. [i.e. cancelButtonText is null].\r\n */\r\nfx.modal = function ({title = null, type = 'success', content = 'Alert Content', confirmButtonText = null, cancelButtonText = null, html = true, onConfirm = null, onCancel = null, onEsc = null}: FXModalType = {}) {\r\n\tlet alertIconPath,\r\n\t\taltAlertIcon;\r\n\tconst initialModal = FuxcelModal.init({title: title, html: html, content: <string>content, id: 'init', hasFooter: false});\r\n\tconst modalBody = fx('.fx-modal-body', initialModal);\r\n\tconst body = document.querySelector('body');\r\n\t\r\n\talertIconPath = type === 'success' ?\r\n\t\t`${Fuxcel.path}/images/ok-24.svg` :\r\n\t\t(type === 'error' ? `${Fuxcel.path}/images/cancel-24.svg` : `${Fuxcel.path}/images/warning-24.svg`);\r\n\taltAlertIcon = type === 'success' ? '\u2705' : (type === 'error' ? '\u274C' : '\u26A0\uFE0F');\r\n\t\r\n\tconst alertIcon = `<img src=\"${alertIconPath}\" alt=\"${altAlertIcon}\" class=\"fx-modal-alert-icon\">`;\r\n\tconst buttonsWrapper = (buttons: string): string => `<div class=\"fx-modal-alert-buttons\">${buttons}</div>`;\r\n\t\r\n\tconst cancelButton = (content: string) => `<button type=\"button\" id=\"fx-modal-cancel\" class=\"fx-btn fx-btn-error\" data-fx-action=\"close\" data-fx-target=\"modal\">${content}</button>`;\r\n\tconst confirmButton = (content: string) => `<button type=\"button\" id=\"fx-modal-confirm\" class=\"fx-btn fx-btn-primary\" data-fx-target=\"modal\" data-fx-modal=\"init\">${content}</button>`;\r\n\t\r\n\tconst buttons = confirmButtonText && cancelButtonText ?\r\n\t\tcancelButton(cancelButtonText) + confirmButton(confirmButtonText) :\r\n\t\t(confirmButtonText ? confirmButton(confirmButtonText) : (cancelButtonText && cancelButton(cancelButtonText)));\r\n\t\r\n\tmodalBody.style({display: 'flex', flexDirection: 'column', alignItems: 'center'}).insertHTML(alertIcon, 'prefix')\r\n\tbuttons && modalBody.insertHTML(buttonsWrapper(buttons), 'suffix');\r\n\t\r\n\tbody?.append(initialModal);\r\n\tfx('.fx-modal-alert-icon', initialModal).style({visibility: 'visible'}).fadein(2000).then();\r\n\t\r\n\tconst modal = new FuxcelModal(initialModal);\r\n\tmodal.show(!cancelButtonText);\r\n\t\r\n\tif (cancelButtonText || confirmButtonText) {\r\n\t\t// Trigger the onEsc() function if available and cancel button is not displayed.\r\n\t\tif (!cancelButtonText)\r\n\t\t\tmodal.off().upon('fx.modal.hide', (e) => typeof onEsc === 'function' ? onEsc(<CustomEvent>e, modal) : null);\r\n\t\t\r\n\t\tmodal.off('click').upon('click', function (e) {\r\n\t\t\tconst clickedTarget = fx(e.target);\r\n\t\t\tconst isCancel = clickedTarget.matchSelector('#fx-modal-cancel');\r\n\t\t\tconst isConfirm = clickedTarget.matchSelector('#fx-modal-confirm');\r\n\t\t\t\r\n\t\t\t// Hide modal if mouse is left-clicked outside the modal content [Trigger clicking on either buttons if any is available].\r\n\t\t\tfx('.fx-modal-content', modal).hasFocus.then((focused: boolean) => {\r\n\t\t\t\tif (!focused)\r\n\t\t\t\t\tcancelButtonText ?\r\n\t\t\t\t\t\tdocument.querySelector('#fx-modal-cancel')?.dispatchEvent(FuxcelModal.fxModalCancelButtonClick) :\r\n\t\t\t\t\t\tdocument.querySelector('#fx-modal-confirm')?.dispatchEvent(FuxcelModal.fxModalCancelButtonClick);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tif (isCancel || isConfirm) {\r\n\t\t\t\tmodal.hide(true);\r\n\t\t\t\tmodal.off().upon('fx.modal.hide', (e) => isCancel && typeof onCancel === 'function' ? onCancel(<CustomEvent>e, modal) : (isConfirm && typeof onConfirm === 'function' ? onConfirm(<CustomEvent>e, modal) : null));\r\n\t\t\t}\r\n\t\t});\r\n\t} else {\r\n\t\t// Trigger the onEsc() function if available and cancel button is not displayed.\r\n\t\tif (!cancelButtonText)\r\n\t\t\tmodal.off().upon('fx.modal.hide', (e) => typeof onEsc === 'function' ? onEsc(<CustomEvent>e, modal) : null);\r\n\t}\r\n\t\r\n\treturn modal;\r\n};\r\n\r\n/**\r\n * Callback on DOMContentLoaded.\r\n *\r\n * @param listener {((e: Event) => void)}\r\n */\r\nfx.onDocumentLoad = (listener: (e: Event) => void) => {\r\n\tfx(document).off().upon('DOMContentLoaded', listener)\r\n}\r\n\r\n/**\r\n * Check if given input passes the Luhn Algorithm Test.\r\n *\r\n * @param input {any | string | number} input to check.\r\n * @return {boolean} true if passed; false otherwise.\r\n */\r\nfx.passLuhnAlgo = (input: any | string | number): boolean => {\r\n\tconst digitSum = (c: any | number): number => (c < 10) ? c : digitSum(Math.trunc(c / 10) + (c % 10));\r\n\t\r\n\treturn input.split('').reverse()\r\n\t\t.map(Number)\r\n\t\t.map((value: number, index: number) => index % 2 !== 0 ? digitSum(value * 2) : 2)\r\n\t\t.reduce((previous: number, current: number) => previous + current) % 10 === 0;\r\n}\r\n// Expose plugin to Window\r\npushPropToWindow('fuxcel', Fuxcel);\r\n\r\n// Automatically initialize modal if triggers are available\r\nFuxcelModal.modalTriggers.length && new FuxcelModal('*');\r\n"],
  "mappings": "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",
  "names": ["index", "_element", "step", "data", "buttons", "content", "e"]
}
