#!/usr/bin/env php
<?php
if (!defined('PROJECT_ROOT'))
	define('PROJECT_ROOT', str_replace('\\', '/', realpath(__DIR__)));

require_once PROJECT_ROOT . '/vendor/xhodos/framework/Helpers/app.php';
require_once PROJECT_ROOT . '/vendor/xhodos/framework/Stack/Template/Engine.php';
require_once PROJECT_ROOT . '/vendor/xhodos/framework/Stack/Template/Compiler.php';

use Hodos\Stack\Template\Compiler;


echo <<<LOGO
___      ___    _____   _______   __        __            ______
\  \    /  /   /  __|  |   ___/  |  |      |  |          +  __  +
 \  \  /  /   /` /     |  |      |  |      |  |         +  /  \  +
  \  \/  /   +  /      |  |___   |  |      |  |        +  /____\  +
   +    +   +  |       |   ___|  |  |      |  |       +  ________  +
  /  /\  \   +  \      |  |      |  |      |  |      +  /        \  +
 /  /  \  \   \  \__   |  |____  |  |____  |  |____  \  |        |  /
/__/    \__\   \____|  |______/  |______/  |______/   \_|        |_/

©️ XCELLA INSIGHTS LTD.
Xstack CLI Tool v1.0
LOGO. "\n\n";

function portIsInUse(string $host, int $port):bool
{
	$connection = @fsockopen($host, $port, $errno, $errstr, 1);
	if ($connection) {
		fclose($connection);
		return true; // Something is already using the port
	}
	return false;
}

$getFileCreationPath = function (string $path) {
	$path = str_replace('.php', '', correctDirPath($path));
	$classname = array_reverse(explode('/', $path))[0];
	$final_path = implode('/', array_slice(array_reverse(explode('/', $path)), 1));
	return [$final_path, $classname];
};

function parseOptions(array $argv):array
{
	$options = [];
	for ($i = 0; $i < count($argv); $i++) {
		if (str_starts_with($argv[$i], '--')) {
			$key = ltrim($argv[$i], '-');
			$value = $argv[$i + 1] ?? true; // If no value, treat it as a flag
			if (!str_starts_with($value, '--')) {
				$options[$key] = $value;
				$i++; // Skip next arg (the value)
			} else {
				$options[$key] = true; // It's a flag (e.g., --verbose)
			}
		} else
			$options['misc'][] = $argv[$i];
	}
	return $options;
}

$command = $argv[1] ?? NULL;
$options = parseOptions(array_slice($argv, 2)); // skip script name + command

switch ($command) {
	case 'serve':
		$host = $options['host'] ?? '127.0.0.1';
		$port = $options['port'] ?? '8000';
		
		if (portIsInUse($host, $port))
			die("❌  Port $port on $host is already in use.\n");
		
		echo "✅  Port $port on $host is available.\n";
		echo "🚀 Starting server at http://$host:$port\n";
		passthru("php -S $host:$port public/index.php");
		break;
	
	case 'route:list':
		echo "🔍 Listing routes (demo):\n";
		// Placeholder – you can scan a routes file here
		echo "GET /home\n";
		echo "POST /submit\n";
		break;
	
	/*case 'view:compile':
		echo "📆 Compiling views.\n";
		Compiler::compileAll();
		echo "✅  View compilation done.\n";
		break;*/
	
	case 'view:clear':
		echo "🧼  Clearing view cache...\n";
		Compiler::clearCache();
		echo "✅  View cache cleared.\n";
		break;
	
	case 'make:model':
		if (!is_string($options['file']))
			die("❌  Model not defined.\n");
		
		$use = '';
		[$path, $modelName] = $getFileCreationPath($options['file']);
		$filename = correctDirPath(PROJECT_ROOT . "/app/Models/" . (!empty($path) ? "$path/" : NULL) . "$modelName.php");
		$namespace = "App\\Models" . ($path ? mb_convert_case("\\$path", MB_CASE_TITLE) : NULL);
		
		if (file_exists($filename))
			die("Model $filename already exists.\n");
		
		if (!is_dir(correctDirPath(PROJECT_ROOT . "/app/Models/" . (!empty($path) ? "$path/" : NULL))))
			mkdir(correctDirPath(PROJECT_ROOT . "/app/Models/" . (!empty($path) ? "$path/" : NULL)), 0777, true);
		
		if ($namespace !== "App\\Models")
			$use = <<<USE

			use App\\Models\\Model;
			
			USE;
		
		$modelContent = <<<MODEL
		<?php
		
		namespace $namespace;
		$use
		/**
		* Create a new hodos model instance.
		*/
		class $modelName extends Model {}
		MODEL;
		
		file_put_contents($filename, $modelContent);
		echo "✅  Model $modelName created at " . rtrim(correctDirPath((PROJECT_ROOT . "/app/Models/" . (!empty($path) ? "$path" : NULL))), '/') . ".\n";
		break;
	
	case 'make:component':
		if (!is_string($options['file']))
			die("❌  Component not defined.\n");
		
		$message = '';
		[$path, $componentName] = $getFileCreationPath($options['file']);
		$filename = correctDirPath(PROJECT_ROOT . "/app/Components/Views/" . (!empty($path) ? "$path/" : NULL) . "$componentName.php");
		
		$viewComponent = NULL;
		$namespace = "App\\Components\\Views" . ($path ? ("\\$path") : NULL);
		$findFileByName = findFileRecursive(PROJECT_ROOT . '/views/components', "$componentName.xs.php");
		
		if (file_exists($filename) && $findFileByName)
			die("Component $filename already exists.\n");
		
		if ($findFileByName)
			$viewComponent = preg_replace("/^(.*?)\./", '', ltrim(str_replace(['.xs.php', '.php'], '', str_replace('/', '.', $findFileByName->relative)), "."));
		else {
			if (!is_dir(getRootPath() . "/" . env('APP_VIEWS_DIR', 'views') . '/components'))
				mkdir(getRootPath() . "/" . env('APP_VIEWS_DIR', 'views') . '/components', 0777, true);
			$viewComponentName = getRootPath() . "/" . env('APP_VIEWS_DIR', 'views') . '/components/' . toKebabCase($componentName) . ".xs.php";
			$viewContent = <<<VIEW
			<!-- Ho Christos monon estin, hē hodos, hē alētheia, kai hē zōē. -->
			VIEW;
			file_put_contents($viewComponentName, $viewContent);
			$viewComponent = "components." . toKebabCase($componentName);
			$message .= "✅  Component view $viewComponent.xs.php created at " . rtrim($viewComponentName, '/') . ".\n";
		}
		
		if (!is_dir(correctDirPath(PROJECT_ROOT . "/app/Components/Views/" . (!empty($path) ? "$path/" : NULL))))
			mkdir(correctDirPath(PROJECT_ROOT . "/app/Components/Views/" . (!empty($path) ? "$path/" : NULL)), 0777, true);
		
		if (!file_exists($filename)) {
			$modelContent = <<<COMPONENT
			<?php
			
			namespace $namespace;
			
			use Hodos\Stack\Template\Component;
			use Hodos\Stack\Template\View;
			
			/**
			* Create a new hodos component instance.
			*/
			class $componentName extends Component {
				public function __construct() {}

				public function render():View
				{
					return view('$viewComponent');
				}
			}
			COMPONENT;
			
			file_put_contents($filename, $modelContent);
			$message .= "✅  Component $componentName created at " . rtrim(correctDirPath((PROJECT_ROOT . "/app/Components/Views/" . (!empty($path) ? "$path" : NULL))), '/') . ".\n";
		}
		echo $message;
		break;
	
	case 'make:controller':
		if (!is_string($options['file']))
			die("❌  Controller not defined.\n");
		
		$use = '';
		[$path, $controllerName] = $getFileCreationPath($options['file']);
		$filename = correctDirPath(PROJECT_ROOT . "/app/Controllers/" . (!empty($path) ? "$path/" : NULL) . "$controllerName.php");
		$namespace = "App\\Controllers" . ($path ? mb_convert_case("\\$path", MB_CASE_TITLE) : NULL);
		
		
		if (file_exists($filename))
			die("Controller $filename already exists.\n");
		
		if (!is_dir(correctDirPath(PROJECT_ROOT . "/app/Controllers/" . (!empty($path) ? "$path/" : NULL))))
			mkdir(correctDirPath(PROJECT_ROOT . "/app/Controllers/" . (!empty($path) ? "$path/" : NULL)), 0777, true);
		
		if ($namespace !== "App\\Controllers")
			$use = <<<USE

			use App\\Controllers\\Controller;
			
			USE;
		
		$modelContent = <<<CONTROLLER
		<?php
		
		namespace $namespace;
		$use
		/**
		* Create a new hodos controller instance.
		*/
		class $controllerName extends Controller {}
		CONTROLLER;
		
		file_put_contents($filename, $modelContent);
		echo "✅  Model $controllerName created at " . rtrim(correctDirPath((PROJECT_ROOT . "/app/Models/" . (!empty($path) ? "$path" : NULL))), '/') . ".\n";
		break;
	
	default:
		echo "❌  Unknown command.\n";
		echo "Usage:\n";
		echo "  php stack serve --host [host] --port [port]\n";
		echo "  php stack route:list\n";
		echo "  php stack view:compile\n";
		echo "  php stack view:clear\n";
		break;
}
